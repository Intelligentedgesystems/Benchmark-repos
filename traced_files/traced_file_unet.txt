{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset'], 'executed_lines': {1, 2, 3, 5, 6, 7, 8, 9, 11}, 'executed_function_lines': {1}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/utils/__init__.py', 'lineno': 1, 'args': {}, 'lines': [], 'executed_lines': set(), 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 16, 26}, 'executed_function_lines': {1, 38}, 'extra_calls': 1}

{'function_name': 'BasicDataset', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/utils/data_loading.py', 'lineno': 38, 'args': {}, 'lines': ['class BasicDataset(Dataset):', "def __init__(self, images_dir: str, mask_dir: str, scale: float = 1.0, mask_suffix: str = ''):", 'def __len__(self):', '@staticmethod', 'def preprocess(mask_values, pil_img, scale, is_mask):', 'def __getitem__(self, idx):'], 'executed_lines': {64, 65, 38, 39, 93, 61}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 16, 115, 26}, 'executed_function_lines': {1, 115, 38}, 'extra_calls': 1}

{'function_name': 'CarvanaDataset', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/utils/data_loading.py', 'lineno': 115, 'args': {}, 'lines': ['class CarvanaDataset(BasicDataset):', 'def __init__(self, images_dir, mask_dir, scale=1):'], 'executed_lines': {115, 116}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 16, 115, 26}, 'executed_function_lines': {8, 1, 115, 38}, 'extra_calls': 3, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'DoubleConv', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 8, 'args': {}, 'lines': ['class DoubleConv(nn.Module):', '"""(convolution => [BN] => ReLU) * 2"""', 'def __init__(self, in_channels, out_channels, mid_channels=None):', 'def forward(self, x):'], 'executed_lines': {8, 9, 11, 24}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 38, 16, 115, 26, 28}, 'executed_function_lines': {1, 38, 8, 115, 28}, 'extra_calls': 3, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'Down', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 28, 'args': {}, 'lines': ['class Down(nn.Module):', '"""Downscaling with maxpool then double conv"""', 'def __init__(self, in_channels, out_channels):', 'def forward(self, x):'], 'executed_lines': {28, 29, 38, 31}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 26, 28, 38, 42, 115}, 'executed_function_lines': {1, 38, 8, 42, 115, 28}, 'extra_calls': 3, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'Up', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 42, 'args': {}, 'lines': ['class Up(nn.Module):', '"""Upscaling then double conv"""', 'def __init__(self, in_channels, out_channels, bilinear=True):', 'def forward(self, x1, x2):'], 'executed_lines': {56, 42, 43, 45}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 26, 28, 38, 42, 71, 115}, 'executed_function_lines': {1, 38, 71, 8, 42, 115, 28}, 'extra_calls': 3, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'OutConv', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 71, 'args': {}, 'lines': ['class OutConv(nn.Module):', 'def __init__(self, in_channels, out_channels):', 'def forward(self, x):'], 'executed_lines': {72, 76, 71}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 26, 28, 38, 42, 71, 115}, 'executed_function_lines': {1, 38, 71, 8, 6, 42, 115, 28}, 'extra_calls': 2, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'UNet', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 6, 'args': {}, 'lines': ['class UNet(nn.Module):', 'def __init__(self, n_channels, n_classes, bilinear=False):', 'def forward(self, x):', 'def use_checkpointing(self):'], 'executed_lines': {38, 25, 6, 7}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):', 'def predict_img(net,', 'def get_args():', 'def get_output_filenames(args):', 'def mask_to_image(mask: np.ndarray, mask_values):', "if __name__ == '__main__':", 'args = get_args()'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 28, 36, 38, 42, 55, 62, 71, 79, 80, 115}, 'executed_function_lines': {1, 36, 38, 71, 8, 6, 42, 115, 28}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'get_args', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 36, 'args': {}, 'lines': ["parser = argparse.ArgumentParser(description='Predict masks from input images')", "parser.add_argument('--model', '-m', default='./MODEL.pth', metavar='FILE',", "help='Specify the file in which the model is stored')", "parser.add_argument('--input', '-i', metavar='INPUT', nargs='+', help='Filenames of input images', required=True)", "parser.add_argument('--output', '-o', metavar='OUTPUT', nargs='+', help='Filenames of output images')", "parser.add_argument('--viz', '-v', action='store_true',", "help='Visualize the images as they are processed')", "parser.add_argument('--no-save', '-n', action='store_true', help='Do not save the output masks')", "parser.add_argument('--mask-threshold', '-t', type=float, default=0.5,", "help='Minimum probability value to consider a mask pixel white')", "parser.add_argument('--scale', '-s', type=float, default=0.5,", "help='Scale factor for the input images')", "parser.add_argument('--bilinear', action='store_true', default=False, help='Use bilinear upsampling')", "parser.add_argument('--classes', '-c', type=int, default=2, help='Number of classes')", 'return parser.parse_args()'], 'executed_lines': {37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'argparse.Namespace'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):', 'def predict_img(net,', 'def get_args():', 'def get_output_filenames(args):', 'def mask_to_image(mask: np.ndarray, mask_values):', "if __name__ == '__main__':", 'args = get_args()', "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')", 'in_files = args.input', 'out_files = get_output_filenames(args)'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 28, 36, 38, 42, 55, 62, 71, 79, 80, 81, 83, 84, 115}, 'executed_function_lines': {1, 36, 38, 71, 8, 6, 42, 115, 55, 28}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'get_output_filenames', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 55, 'args': {'args': {'type': "<class 'argparse.Namespace'>", 'shape': None}}, 'lines': ['def _generate_name(fn):', 'return args.output or list(map(_generate_name, args.input))'], 'executed_lines': {56, 59}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (1,)}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):', 'def predict_img(net,', 'def get_args():', 'def get_output_filenames(args):', 'def mask_to_image(mask: np.ndarray, mask_values):', "if __name__ == '__main__':", 'args = get_args()', "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')", 'in_files = args.input', 'out_files = get_output_filenames(args)', 'net = UNet(n_channels=3, n_classes=args.classes, bilinear=args.bilinear)'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 28, 36, 38, 42, 55, 62, 71, 79, 80, 81, 83, 84, 86, 115}, 'executed_function_lines': {1, 36, 38, 71, 8, 6, 42, 7, 115, 55, 28}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 7, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'n_channels': {'type': "<class 'int'>", 'shape': None}, 'n_classes': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(UNet, self).__init__()', 'self.n_channels = n_channels', 'self.n_classes = n_classes', 'self.bilinear = bilinear', 'self.inc = (DoubleConv(n_channels, 64))'], 'executed_lines': {8, 9, 10, 11, 13}, 'executed_function_lines': {11}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 11, 'args': {'self': {'type': "<class 'unet.unet_parts.DoubleConv'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'mid_channels': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['super().__init__()', 'if not mid_channels:', 'mid_channels = out_channels', 'self.double_conv = nn.Sequential(', 'nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(mid_channels),', 'nn.ReLU(inplace=True),', 'nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(inplace=True)'], 'executed_lines': {12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 7, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'n_channels': {'type': "<class 'int'>", 'shape': None}, 'n_classes': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(UNet, self).__init__()', 'self.n_channels = n_channels', 'self.n_classes = n_classes', 'self.bilinear = bilinear', 'self.inc = (DoubleConv(n_channels, 64))', 'self.down1 = (Down(64, 128))'], 'executed_lines': {8, 9, 10, 11, 13, 14}, 'executed_function_lines': {11, 31}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 31, 'args': {'self': {'type': "<class 'unet.unet_parts.Down'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super().__init__()', 'self.maxpool_conv = nn.Sequential(', 'nn.MaxPool2d(2),', 'DoubleConv(in_channels, out_channels)'], 'executed_lines': {32, 33, 34, 35}, 'executed_function_lines': {11}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 11, 'args': {'self': {'type': "<class 'unet.unet_parts.DoubleConv'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'mid_channels': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['super().__init__()', 'if not mid_channels:', 'mid_channels = out_channels', 'self.double_conv = nn.Sequential(', 'nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(mid_channels),', 'nn.ReLU(inplace=True),', 'nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(inplace=True)'], 'executed_lines': {12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 31, 'args': {'self': {'type': "<class 'unet.unet_parts.Down'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super().__init__()', 'self.maxpool_conv = nn.Sequential(', 'nn.MaxPool2d(2),', 'DoubleConv(in_channels, out_channels)'], 'executed_lines': {32, 33, 34, 35}, 'executed_function_lines': {11}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 7, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'n_channels': {'type': "<class 'int'>", 'shape': None}, 'n_classes': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(UNet, self).__init__()', 'self.n_channels = n_channels', 'self.n_classes = n_classes', 'self.bilinear = bilinear', 'self.inc = (DoubleConv(n_channels, 64))', 'self.down1 = (Down(64, 128))', 'self.down2 = (Down(128, 256))', 'super().__init__()', 'self.maxpool_conv = nn.Sequential(', 'nn.MaxPool2d(2),', 'DoubleConv(in_channels, out_channels)', 'super().__init__()', 'nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(mid_channels),', 'nn.ReLU(inplace=True),', 'nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(inplace=True)'], 'executed_lines': {32, 33, 34, 35, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, 'executed_function_lines': {11, 45, 31}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 45, 'args': {'self': {'type': "<class 'unet.unet_parts.Up'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super().__init__()', 'if bilinear:', 'self.up = nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size=2, stride=2)', 'self.conv = DoubleConv(in_channels, out_channels)'], 'executed_lines': {54, 49, 53, 46}, 'executed_function_lines': {11}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 11, 'args': {'self': {'type': "<class 'unet.unet_parts.DoubleConv'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'mid_channels': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['super().__init__()', 'if not mid_channels:', 'mid_channels = out_channels', 'self.double_conv = nn.Sequential(', 'nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(mid_channels),', 'nn.ReLU(inplace=True),', 'nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(inplace=True)'], 'executed_lines': {12, 13, 14, 15, 16, 17, 18, 19, 20, 21}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 45, 'args': {'self': {'type': "<class 'unet.unet_parts.Up'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super().__init__()', 'if bilinear:', 'self.up = nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size=2, stride=2)', 'self.conv = DoubleConv(in_channels, out_channels)'], 'executed_lines': {54, 49, 53, 46}, 'executed_function_lines': {11}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 7, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'n_channels': {'type': "<class 'int'>", 'shape': None}, 'n_classes': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(UNet, self).__init__()', 'self.n_channels = n_channels', 'self.n_classes = n_classes', 'self.bilinear = bilinear', 'self.inc = (DoubleConv(n_channels, 64))', 'self.down1 = (Down(64, 128))', 'self.down2 = (Down(128, 256))', 'super().__init__()', 'self.maxpool_conv = nn.Sequential(', 'nn.MaxPool2d(2),', 'DoubleConv(in_channels, out_channels)', 'super().__init__()', 'nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(mid_channels),', 'nn.ReLU(inplace=True),', 'nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(inplace=True)', 'super().__init__()', 'if bilinear:', 'self.up = nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size=2, stride=2)', 'self.conv = DoubleConv(in_channels, out_channels)', 'self.up4 = (Up(128, 64, bilinear))', 'self.outc = (OutConv(64, n_classes))'], 'executed_lines': {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 46, 49, 53, 54}, 'executed_function_lines': {72, 11, 45, 31}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 72, 'args': {'self': {'type': "<class 'unet.unet_parts.OutConv'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(OutConv, self).__init__()', 'self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)'], 'executed_lines': {73, 74}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 7, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'n_channels': {'type': "<class 'int'>", 'shape': None}, 'n_classes': {'type': "<class 'int'>", 'shape': None}, 'bilinear': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(UNet, self).__init__()', 'self.n_channels = n_channels', 'self.n_classes = n_classes', 'self.bilinear = bilinear', 'self.inc = (DoubleConv(n_channels, 64))', 'self.down1 = (Down(64, 128))', 'self.down2 = (Down(128, 256))', 'super().__init__()', 'self.maxpool_conv = nn.Sequential(', 'nn.MaxPool2d(2),', 'DoubleConv(in_channels, out_channels)', 'super().__init__()', 'nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(mid_channels),', 'nn.ReLU(inplace=True),', 'nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(inplace=True)', 'super().__init__()', 'if bilinear:', 'self.up = nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size=2, stride=2)', 'self.conv = DoubleConv(in_channels, out_channels)', 'self.up4 = (Up(128, 64, bilinear))', 'self.outc = (OutConv(64, n_classes))'], 'executed_lines': {8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 32, 33, 34, 35, 46, 49, 53, 54}, 'executed_function_lines': {72, 11, 45, 31}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):', 'def predict_img(net,', 'def get_args():', 'def get_output_filenames(args):', 'def mask_to_image(mask: np.ndarray, mask_values):', "if __name__ == '__main__':", 'args = get_args()', "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')", 'in_files = args.input', 'out_files = get_output_filenames(args)', 'net = UNet(n_channels=3, n_classes=args.classes, bilinear=args.bilinear)', "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')", "logging.info(f'Loading model {args.model}')", "logging.info(f'Using device {device}')", 'net.to(device=device)', 'state_dict = torch.load(args.model, map_location=device)', "mask_values = state_dict.pop('mask_values', [0, 1])", 'net.load_state_dict(state_dict)', "logging.info('Model loaded!')", 'for i, filename in enumerate(in_files):', "logging.info(f'Predicting image {filename} ...')", 'img = Image.open(filename)', 'mask = predict_img(net=net,', 'full_img=img,', 'scale_factor=args.scale,', 'out_threshold=args.mask_threshold,', 'device=device)'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 28, 36, 38, 42, 55, 62, 71, 79, 80, 81, 83, 84, 86, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 105, 106, 107, 115}, 'executed_function_lines': {1, 36, 38, 71, 8, 6, 42, 7, 15, 115, 55, 28}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'predict_img', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 15, 'args': {'net': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'full_img': {'type': "<class 'PIL.JpegImagePlugin.JpegImageFile'>", 'shape': (640, 388)}, 'device': {'type': "<class 'torch.device'>", 'shape': None}, 'scale_factor': {'type': "<class 'float'>", 'shape': None}, 'out_threshold': {'type': "<class 'float'>", 'shape': None}}, 'lines': ['net.eval()', 'img = torch.from_numpy(BasicDataset.preprocess(None, full_img, scale_factor, is_mask=False))'], 'executed_lines': {20, 21}, 'executed_function_lines': {64}, 'extra_calls': 0}

{'function_name': 'preprocess', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/utils/data_loading.py', 'lineno': 64, 'args': {'mask_values': {'type': "<class 'NoneType'>", 'shape': None}, 'pil_img': {'type': "<class 'PIL.JpegImagePlugin.JpegImageFile'>", 'shape': (640, 388)}, 'scale': {'type': "<class 'float'>", 'shape': None}, 'is_mask': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['w, h = pil_img.size', 'newW, newH = int(scale * w), int(scale * h)', "assert newW > 0 and newH > 0, 'Scale is too small, resized images would have no pixel'", 'pil_img = pil_img.resize((newW, newH), resample=Image.NEAREST if is_mask else Image.BICUBIC)', 'img = np.asarray(pil_img)', 'if is_mask:', 'if img.ndim == 2:', 'img = img.transpose((2, 0, 1))', 'if (img > 1).any():', 'img = img / 255.0', 'return img'], 'executed_lines': {66, 67, 68, 69, 70, 72, 83, 86, 88, 89, 91}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'numpy.ndarray'>", 'shape': (3, 194, 320)}}

{'function_name': 'predict_img', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 15, 'args': {'net': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'full_img': {'type': "<class 'PIL.JpegImagePlugin.JpegImageFile'>", 'shape': (640, 388)}, 'device': {'type': "<class 'torch.device'>", 'shape': None}, 'scale_factor': {'type': "<class 'float'>", 'shape': None}, 'out_threshold': {'type': "<class 'float'>", 'shape': None}}, 'lines': ['net.eval()', 'img = torch.from_numpy(BasicDataset.preprocess(None, full_img, scale_factor, is_mask=False))', 'img = img.unsqueeze(0)', 'img = img.to(device=device, dtype=torch.float32)', 'with torch.no_grad():', 'output = net(img).cpu()'], 'executed_lines': {20, 21, 22, 23, 25, 26}, 'executed_function_lines': {64, 25}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 25, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 194, 320])}}, 'lines': ['x1 = self.inc(x)'], 'executed_lines': {26}, 'executed_function_lines': {24}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 24, 'args': {'self': {'type': "<class 'unet.unet_parts.DoubleConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 194, 320])}}, 'lines': ['return self.double_conv(x)'], 'executed_lines': {25}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 194, 320])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 25, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 194, 320])}}, 'lines': ['x1 = self.inc(x)', 'x2 = self.down1(x1)'], 'executed_lines': {26, 27}, 'executed_function_lines': {24, 38}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 38, 'args': {'self': {'type': "<class 'unet.unet_parts.Down'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 194, 320])}}, 'lines': ['return self.maxpool_conv(x)'], 'executed_lines': {39}, 'executed_function_lines': {24}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 24, 'args': {'self': {'type': "<class 'unet.unet_parts.DoubleConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 97, 160])}}, 'lines': ['return self.double_conv(x)'], 'executed_lines': {25}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 97, 160])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 38, 'args': {'self': {'type': "<class 'unet.unet_parts.Down'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 194, 320])}}, 'lines': ['return self.maxpool_conv(x)'], 'executed_lines': {39}, 'executed_function_lines': {24}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 97, 160])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 25, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 194, 320])}}, 'lines': ['x1 = self.inc(x)', 'x2 = self.down1(x1)', 'x3 = self.down2(x2)', 'return self.maxpool_conv(x)', 'return self.double_conv(x)', 'x4 = self.down3(x3)', 'x5 = self.down4(x4)', 'x = self.up1(x5, x4)'], 'executed_lines': {39, 25, 26, 27, 28, 29, 30, 31}, 'executed_function_lines': {24, 56, 38}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 1024, 12, 20])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 56, 'args': {'self': {'type': "<class 'unet.unet_parts.Up'>", 'shape': None}, 'x1': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 1024, 12, 20])}, 'x2': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 512, 24, 40])}}, 'lines': ['x1 = self.up(x1)', 'diffY = x2.size()[2] - x1.size()[2]', 'diffX = x2.size()[3] - x1.size()[3]', 'x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,', 'diffY // 2, diffY - diffY // 2])', 'x = torch.cat([x2, x1], dim=1)', 'return self.conv(x)'], 'executed_lines': {67, 68, 57, 59, 60, 62, 63}, 'executed_function_lines': {24}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 24, 'args': {'self': {'type': "<class 'unet.unet_parts.DoubleConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 1024, 24, 40])}}, 'lines': ['return self.double_conv(x)'], 'executed_lines': {25}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 512, 24, 40])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 56, 'args': {'self': {'type': "<class 'unet.unet_parts.Up'>", 'shape': None}, 'x1': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 1024, 12, 20])}, 'x2': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 512, 24, 40])}}, 'lines': ['x1 = self.up(x1)', 'diffY = x2.size()[2] - x1.size()[2]', 'diffX = x2.size()[3] - x1.size()[3]', 'x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,', 'diffY // 2, diffY - diffY // 2])', 'x = torch.cat([x2, x1], dim=1)', 'return self.conv(x)'], 'executed_lines': {67, 68, 57, 59, 60, 62, 63}, 'executed_function_lines': {24}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 512, 24, 40])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 25, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 194, 320])}}, 'lines': ['x1 = self.inc(x)', 'x2 = self.down1(x1)', 'x3 = self.down2(x2)', 'return self.maxpool_conv(x)', 'return self.double_conv(x)', 'x4 = self.down3(x3)', 'x5 = self.down4(x4)', 'x = self.up1(x5, x4)', 'x = self.up2(x, x3)', 'x1 = self.up(x1)', 'diffY = x2.size()[2] - x1.size()[2]', 'diffX = x2.size()[3] - x1.size()[3]', 'x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,', 'diffY // 2, diffY - diffY // 2])', 'x = torch.cat([x2, x1], dim=1)', 'return self.conv(x)', 'x = self.up3(x, x2)', 'x = self.up4(x, x1)', 'logits = self.outc(x)'], 'executed_lines': {25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 57, 59, 60, 62, 63, 67, 68}, 'executed_function_lines': {24, 56, 76, 38}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 194, 320])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_parts.py', 'lineno': 76, 'args': {'self': {'type': "<class 'unet.unet_parts.OutConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 194, 320])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {77}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 2, 194, 320])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/unet/unet_model.py', 'lineno': 25, 'args': {'self': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 194, 320])}}, 'lines': ['x1 = self.inc(x)', 'x2 = self.down1(x1)', 'x3 = self.down2(x2)', 'return self.maxpool_conv(x)', 'return self.double_conv(x)', 'x4 = self.down3(x3)', 'x5 = self.down4(x4)', 'x = self.up1(x5, x4)', 'x = self.up2(x, x3)', 'x1 = self.up(x1)', 'diffY = x2.size()[2] - x1.size()[2]', 'diffX = x2.size()[3] - x1.size()[3]', 'x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,', 'diffY // 2, diffY - diffY // 2])', 'x = torch.cat([x2, x1], dim=1)', 'return self.conv(x)', 'x = self.up3(x, x2)', 'x = self.up4(x, x1)', 'logits = self.outc(x)', 'return logits'], 'executed_lines': {25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 57, 59, 60, 62, 63, 67, 68}, 'executed_function_lines': {24, 56, 76, 38}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 2, 194, 320])}}

{'function_name': 'predict_img', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 15, 'args': {'net': {'type': "<class 'unet.unet_model.UNet'>", 'shape': None}, 'full_img': {'type': "<class 'PIL.JpegImagePlugin.JpegImageFile'>", 'shape': (640, 388)}, 'device': {'type': "<class 'torch.device'>", 'shape': None}, 'scale_factor': {'type': "<class 'float'>", 'shape': None}, 'out_threshold': {'type': "<class 'float'>", 'shape': None}}, 'lines': ['net.eval()', 'img = torch.from_numpy(BasicDataset.preprocess(None, full_img, scale_factor, is_mask=False))', 'img = img.unsqueeze(0)', 'img = img.to(device=device, dtype=torch.float32)', 'with torch.no_grad():', 'output = net(img).cpu()', "output = F.interpolate(output, (full_img.size[1], full_img.size[0]), mode='bilinear')", 'if net.n_classes > 1:', 'mask = output.argmax(dim=1)', 'return mask[0].long().squeeze().numpy()'], 'executed_lines': {33, 20, 21, 22, 23, 25, 26, 27, 28, 29}, 'executed_function_lines': {64, 25}, 'extra_calls': 0, 'return_value': {'type': "<class 'numpy.ndarray'>", 'shape': (388, 640)}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):', 'def predict_img(net,', 'def get_args():', 'def get_output_filenames(args):', 'def mask_to_image(mask: np.ndarray, mask_values):', "if __name__ == '__main__':", 'args = get_args()', "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')", 'in_files = args.input', 'out_files = get_output_filenames(args)', 'net = UNet(n_channels=3, n_classes=args.classes, bilinear=args.bilinear)', "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')", "logging.info(f'Loading model {args.model}')", "logging.info(f'Using device {device}')", 'net.to(device=device)', 'state_dict = torch.load(args.model, map_location=device)', "mask_values = state_dict.pop('mask_values', [0, 1])", 'net.load_state_dict(state_dict)', "logging.info('Model loaded!')", 'for i, filename in enumerate(in_files):', "logging.info(f'Predicting image {filename} ...')", 'img = Image.open(filename)', 'mask = predict_img(net=net,', 'full_img=img,', 'scale_factor=args.scale,', 'out_threshold=args.mask_threshold,', 'device=device)', 'if not args.no_save:', 'out_filename = out_files[i]', 'result = mask_to_image(mask, mask_values)'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 28, 36, 38, 42, 55, 62, 71, 79, 80, 81, 83, 84, 86, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 115}, 'executed_function_lines': {1, 36, 38, 71, 8, 6, 42, 7, 15, 115, 55, 28, 62}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'mask_to_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 62, 'args': {'mask': {'type': "<class 'numpy.ndarray'>", 'shape': (388, 640)}, 'mask_values': {'type': "<class 'list'>", 'shape': (2,)}}, 'lines': ['if isinstance(mask_values[0], list):', 'elif mask_values == [0, 1]:', 'out = np.zeros((mask.shape[-2], mask.shape[-1]), dtype=bool)', 'if mask.ndim == 3:', 'for i, v in enumerate(mask_values):', 'out[mask == i] = v', 'return Image.fromarray(out)'], 'executed_lines': {65, 66, 70, 73, 74, 76, 63}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 388)}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py', 'lineno': 1, 'args': {}, 'lines': ['import argparse', 'import logging', 'import os', 'import numpy as np', 'import torch', 'import torch.nn.functional as F', 'from PIL import Image', 'from torchvision import transforms', 'from utils.data_loading import BasicDataset', 'from PIL import Image', 'from os.path import splitext, isfile, join', 'from torch.utils.data import Dataset', 'from tqdm import tqdm', 'def load_image(filename):', 'def unique_mask_values(idx, mask_dir, mask_suffix):', 'class BasicDataset(Dataset):', 'class CarvanaDataset(BasicDataset):', 'class Down(nn.Module):', 'class Up(nn.Module):', 'class OutConv(nn.Module):', 'def predict_img(net,', 'def get_args():', 'def get_output_filenames(args):', 'def mask_to_image(mask: np.ndarray, mask_values):', "if __name__ == '__main__':", 'args = get_args()', "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')", 'in_files = args.input', 'out_files = get_output_filenames(args)', 'net = UNet(n_channels=3, n_classes=args.classes, bilinear=args.bilinear)', "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')", "logging.info(f'Loading model {args.model}')", "logging.info(f'Using device {device}')", 'net.to(device=device)', 'state_dict = torch.load(args.model, map_location=device)', "mask_values = state_dict.pop('mask_values', [0, 1])", 'net.load_state_dict(state_dict)', "logging.info('Model loaded!')", 'for i, filename in enumerate(in_files):', "logging.info(f'Predicting image {filename} ...')", 'img = Image.open(filename)', 'mask = predict_img(net=net,', 'full_img=img,', 'scale_factor=args.scale,', 'out_threshold=args.mask_threshold,', 'device=device)', 'if not args.no_save:', 'out_filename = out_files[i]', 'result = mask_to_image(mask, mask_values)', 'result.save(out_filename)', "logging.info(f'Mask saved to {out_filename}')"], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 26, 28, 36, 38, 42, 55, 62, 71, 79, 80, 81, 83, 84, 86, 88, 89, 90, 92, 93, 94, 95, 97, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115}, 'executed_function_lines': {1, 36, 38, 71, 8, 6, 42, 7, 15, 115, 55, 28, 62}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

