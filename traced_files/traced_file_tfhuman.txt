{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model'], 'executed_lines': {3, 4, 5, 6, 7, 8, 9, 10, 12}, 'executed_function_lines': {5}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 5, 'args': {}, 'lines': ['"""', 'from tensorflow.keras.layers import Input, Conv2D, Dense, GlobalAveragePooling2D', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.applications.mobilenet import MobileNet', 'from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2', 'from tensorflow.keras.applications.resnet50 import ResNet50', 'from common.backbones.mobilenet_v3 import MobileNetV3Large, MobileNetV3Small'], 'executed_lines': {5, 6, 7, 8, 9, 10, 12}, 'executed_function_lines': {31}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/backbones/mobilenet_v3.py', 'lineno': 31, 'args': {}, 'lines': ['"""', 'from __future__ import absolute_import', 'from __future__ import division', 'from __future__ import print_function', 'import os, sys', 'import warnings', 'from keras_applications.imagenet_utils import _obtain_input_shape', 'from keras_applications.imagenet_utils import preprocess_input as _preprocess_input', 'from tensorflow.keras.utils import get_source_inputs, get_file', 'from tensorflow.keras.layers import Conv2D, DepthwiseConv2D, Dense, GlobalAveragePooling2D, GlobalMaxPooling2D, Flatten, Softmax, Dropout, ZeroPadding2D', 'from tensorflow.keras.layers import BatchNormalization, Add, Multiply, Reshape', 'from tensorflow.keras.layers import Input, Activation, ReLU, Reshape, Lambda', 'from tensorflow.keras.models import Model', 'from tensorflow.keras import backend as K', "BASE_WEIGHT_PATH = ('https://github.com/DrSlink/mobilenet_v3_keras/'", "'c256439950195a46c97ede7c294261c6'),", "'12c0a8442d84beebe8552addf0dcb950'),", "'c1cddbcde6e26b60bdce8e6e2c7cae54'),", "'c944bb457ad52d1594392200b48b4ddb'),", "'5bec671f47565ab30e540c257bba8591'),", "'1efbf7e822e03f250f45faa3c6bbe156'),", 'def correct_pad(backend, inputs, kernel_size):', 'def preprocess_input(x):', 'def relu(x):', 'def hard_sigmoid(x):', 'def hard_swish(x):', 'def _depth(v, divisor=8, min_value=None):', 'def _se_block(inputs, filters, se_ratio, prefix):', 'def _inverted_res_block(x, expansion, filters, kernel_size, stride,', 'dropout_rate=0.2,', "setattr(MobileNetV3Small, '__doc__', MobileNetV3.__doc__)", "setattr(MobileNetV3Large, '__doc__', MobileNetV3.__doc__)", "if __name__ == '__main__':"], 'executed_lines': {129, 139, 149, 31, 32, 33, 34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 176, 53, 58, 61, 64, 67, 70, 73, 77, 592, 593, 595, 102, 239, 121, 125}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 5, 'args': {}, 'lines': ['"""', 'from tensorflow.keras.layers import Input, Conv2D, Dense, GlobalAveragePooling2D', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.applications.mobilenet import MobileNet', 'from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2', 'from tensorflow.keras.applications.resnet50 import ResNet50', 'from common.backbones.mobilenet_v3 import MobileNetV3Large, MobileNetV3Small', 'from common.backbones.peleenet import PeleeNet'], 'executed_lines': {5, 6, 7, 8, 9, 10, 12, 13}, 'executed_function_lines': {11, 31}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/backbones/peleenet.py', 'lineno': 11, 'args': {}, 'lines': ['import os, sys', 'import warnings', 'from keras_applications.imagenet_utils import _obtain_input_shape', 'from keras_applications.imagenet_utils import preprocess_input as _preprocess_input', 'from tensorflow.keras.utils import get_source_inputs, get_file', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.layers import Input, Conv2D, BatchNormalization, ReLU, \\', 'from tensorflow.keras import backend as K', "'https://github.com/david8862/tf-keras-image-classifier/'", 'def preprocess_input(x):', "def dense_graph(x, growth_rate, bottleneck_width, name=''):", "def dense_block_graph(x, num_layers, bn_size, growth_rate, name=''):", "def stem_block_graph(x, num_init_features, name=''):", "def basic_conv2d_graph(x, out_channels, kernel_size, strides, padding, activation=True, name=''):", 'def PeleeNet(input_shape=None,', 'growth_rate=32,', 'block_config=[3, 4, 8, 6],', 'num_init_features=32,', 'bottleneck_width=[1, 2, 4, 4],', 'include_top=True,', "weights='imagenet',", 'input_tensor=None,', 'pooling=None,', 'dropout_rate=0.05,', 'classes=1000,', "setattr(PeleeNet, '__doc__', PeleeNet.__doc__)", "if __name__ == '__main__':"], 'executed_lines': {128, 129, 130, 131, 132, 133, 134, 11, 12, 14, 15, 16, 17, 18, 20, 24, 282, 28, 285, 60, 87, 94, 113, 124, 125, 126, 127}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 5, 'args': {}, 'lines': ['"""', 'from tensorflow.keras.layers import Input, Conv2D, Dense, GlobalAveragePooling2D', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.applications.mobilenet import MobileNet', 'from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2', 'from tensorflow.keras.applications.resnet50 import ResNet50', 'from common.backbones.mobilenet_v3 import MobileNetV3Large, MobileNetV3Small', 'from common.backbones.peleenet import PeleeNet', 'from common.backbones.ghostnet import GhostNet'], 'executed_lines': {5, 6, 7, 8, 9, 10, 12, 13, 14}, 'executed_function_lines': {11, 7, 31}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/backbones/ghostnet.py', 'lineno': 7, 'args': {}, 'lines': ['import os, sys', 'import warnings', 'import math', 'from keras_applications.imagenet_utils import _obtain_input_shape', 'from keras_applications.imagenet_utils import preprocess_input as _preprocess_input', 'from tensorflow.keras.utils import get_source_inputs, get_file', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.layers import Conv2D, DepthwiseConv2D, BatchNormalization, Dense, Flatten, ReLU, Reshape, Activation', 'from tensorflow.keras.layers import Input, GlobalAveragePooling2D, GlobalMaxPooling2D, Concatenate, Dropout, Add, Multiply', 'from tensorflow.keras import backend as K', "'https://github.com/david8862/tf-keras-image-classifier/'", 'def preprocess_input(x):', 'def _make_divisible(v, divisor, min_value=None):', 'def hard_sigmoid(x):', "def primary_conv(x, output_filters, kernel_size, strides=(1,1), padding='same', act=True, use_bias=False, name=None):", "def cheap_operations(x, output_filters, kernel_size, strides=(1,1), padding='same', act=True, use_bias=False, name=None):", 'def SqueezeExcite(input_x, se_ratio=0.25, reduced_base_chs=None, divisor=4, name=None):', 'def ConvBnAct(input_x, out_chs, kernel_size, stride=(1,1), name=None):', 'def GhostModule(input_x, output_chs, kernel_size=1, ratio=2, dw_size=3, stride=(1,1), act=True, name=None):', 'def GhostBottleneck(input_x, mid_chs, out_chs, dw_kernel_size=3, stride=(1,1), se_ratio=0., name=None):', '[[3,  16,  16, 0, 1]],', '[[3,  48,  24, 0, 2]],', '[[3,  72,  24, 0, 1]],', '[[5,  72,  40, 0.25, 2]],', '[[5, 120,  40, 0.25, 1]],', '[[3, 240,  80, 0, 2]],', '[[3, 200,  80, 0, 1],', '[3, 184,  80, 0, 1],', '[3, 480, 112, 0.25, 1],', '[3, 672, 112, 0.25, 1]', '[[5, 672, 160, 0.25, 2]],', '[[5, 960, 160, 0, 1],', '[5, 960, 160, 0.25, 1],', '[5, 960, 160, 0, 1],', '[5, 960, 160, 0.25, 1]', 'def GhostNet(input_shape=None,', 'include_top=True,', "weights='imagenet',", 'input_tensor=None,', 'cfgs=DEFAULT_CFGS,', 'width=1.0,', 'dropout_rate=0.2,', 'pooling=None,', 'classes=1000,', "if __name__ == '__main__':"], 'executed_lines': {129, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 396, 21, 150, 25, 61, 71, 199, 201, 202, 75, 204, 205, 207, 208, 209, 211, 212, 87, 215, 216, 217, 218, 219, 224, 225, 98, 226, 227, 228, 229, 230, 231, 232, 117}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 5, 'args': {}, 'lines': ['"""', 'from tensorflow.keras.layers import Input, Conv2D, Dense, GlobalAveragePooling2D', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.applications.mobilenet import MobileNet', 'from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2', 'from tensorflow.keras.applications.resnet50 import ResNet50', 'from common.backbones.mobilenet_v3 import MobileNetV3Large, MobileNetV3Small', 'from common.backbones.peleenet import PeleeNet', 'from common.backbones.ghostnet import GhostNet', 'from simple_baselines.layers import Deconv_block, Upsample_block, Upsample_lite_block'], 'executed_lines': {5, 6, 7, 8, 9, 10, 12, 13, 14, 15}, 'executed_function_lines': {3, 11, 7, 31}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/layers.py', 'lineno': 3, 'args': {}, 'lines': ['from tensorflow.keras.layers import Conv2D, Conv2DTranspose, UpSampling2D, SeparableConv2D, BatchNormalization, ReLU', 'BN_MOMENTUM = 0.1', 'def get_deconv_cfg(deconv_kernel, index):', 'def Deconv_block(x, num_layers, deconv_channels, deconv_kernels, use_bias):', 'def Upsample_block(x, num_layers, deconv_channels, deconv_kernels, use_bias):', 'def Upsample_lite_block(x, num_layers, deconv_channels, deconv_kernels, use_bias):'], 'executed_lines': {3, 67, 7, 9, 44, 23}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 5, 'args': {}, 'lines': ['"""', 'from tensorflow.keras.layers import Input, Conv2D, Dense, GlobalAveragePooling2D', 'from tensorflow.keras.models import Model', 'from tensorflow.keras.applications.mobilenet import MobileNet', 'from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2', 'from tensorflow.keras.applications.resnet50 import ResNet50', 'from common.backbones.mobilenet_v3 import MobileNetV3Large, MobileNetV3Small', 'from common.backbones.peleenet import PeleeNet', 'from common.backbones.ghostnet import GhostNet', 'from simple_baselines.layers import Deconv_block, Upsample_block, Upsample_lite_block', "def get_base_model(model_type, model_input_shape, weights='imagenet'):", 'def get_simple_baselines_model(model_type, num_classes, model_input_shape=None, freeze_level=0, weights_path=None):'], 'executed_lines': {5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 45, 18}, 'executed_function_lines': {3, 11, 7, 31}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE'], 'executed_lines': {3, 4, 5, 6, 7, 8, 9, 10, 12, 13}, 'executed_function_lines': {3, 5}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/data.py', 'lineno': 3, 'args': {}, 'lines': ['import os, random', 'import numpy as np', 'from PIL import Image', 'import json', 'from tensorflow.keras.utils import Sequence', 'from common.data_utils import random_horizontal_flip, random_vertical_flip, random_brightness, random_grayscale, random_chroma, random_contrast, random_sharpness, random_blur, random_histeq, random_rotate_angle, crop_single_object, rotate_single_object, crop_image, normalize_image, transform_keypoints, generate_gt_heatmap'], 'executed_lines': {3, 4, 5, 6, 7, 9}, 'executed_function_lines': {3}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/data_utils.py', 'lineno': 3, 'args': {}, 'lines': ['"""Data process utility functions."""', 'import numpy as np', 'from PIL import Image, ImageEnhance', 'import cv2', 'import math', 'MPII_SCALE_REFERENCE = 200.0', 'def rand(a=0, b=1):', 'def random_horizontal_flip(image, keypoints, center, matchpoints=None, prob=.5):', 'def random_vertical_flip(image, keypoints, center, matchpoints=None, prob=.5):', 'def random_brightness(image, jitter=.5):', 'def random_chroma(image, jitter=.5):', 'def random_contrast(image, jitter=.5):', 'def random_sharpness(image, jitter=.5):', 'def random_blur(image, prob=.2, size=5):', 'def random_histeq(image, size=8, prob=.2):', 'def random_grayscale(image, prob=.1):', 'def random_rotate_angle(rotate_range, prob=0.5):', 'def get_transform(center, scale, shape, rot=0):', 'def transform(pt, center, scale, shape, invert=0, rot=0):', 'def crop_image(img, center, scale, shape, rotate_angle=0):', 'def transform_keypoints(keypoints, center, scale, shape, rotate_angle):', 'def invert_transform_keypoints(keypoints, center, scale, shape, rotate_angle):', 'def revert_keypoints(keypoints, center, scale, image_shape, input_shape, output_stride=4):', 'def crop_single_object(image, keypoints, center, scale, input_shape):', 'def rotate_single_object(image, keypoints, angle):', "def label_heatmap(img, pt, sigma, type='Gaussian'):", 'def generate_gt_heatmap(keypoints, heatmap_shape, sigma=1):', 'def normalize_image(imgdata, color_mean):', 'def denormalize_image(imgdata, color_mean):', 'def preprocess_image(image, model_input_shape, mean=(0.4404, 0.4440, 0.4327)):'], 'executed_lines': {641, 3, 4, 5, 6, 7, 132, 267, 654, 15, 18, 533, 22, 154, 667, 414, 290, 426, 176, 568, 444, 317, 198, 81, 347, 220, 486, 359, 614, 242}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/data.py', 'lineno': 3, 'args': {}, 'lines': ['import os, random', 'import numpy as np', 'from PIL import Image', 'import json', 'from tensorflow.keras.utils import Sequence', 'from common.data_utils import random_horizontal_flip, random_vertical_flip, random_brightness, random_grayscale, random_chroma, random_contrast, random_sharpness, random_blur, random_histeq, random_rotate_angle, crop_single_object, rotate_single_object, crop_image, normalize_image, transform_keypoints, generate_gt_heatmap', 'OUTPUT_STRIDE = 4', 'class keypoints_dataset(Sequence):'], 'executed_lines': {3, 4, 5, 6, 7, 9, 16, 19}, 'executed_function_lines': {19, 3}, 'extra_calls': 0}

{'function_name': 'keypoints_dataset', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/data.py', 'lineno': 19, 'args': {}, 'lines': ['class keypoints_dataset(Sequence):', 'matchpoints=None):', 'def _get_matchpoint_list(self, matchpoints):', 'def _load_image_annotation(self):', 'def get_dataset_name(self):', 'def get_dataset_size(self):', 'def get_color_mean(self):', 'def get_annotations(self):', 'def get_train_annotations(self):', 'def get_val_annotations(self):', 'def __len__(self):', 'def __getitem__(self, i):', 'def process_image(self, sample_index, annotation):', 'def get_keypoint_classes(self):', 'def on_epoch_end(self):'], 'executed_lines': {259, 70, 262, 105, 108, 111, 19, 115, 53, 118, 150, 121, 26, 124, 127}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/data.py', 'lineno': 3, 'args': {}, 'lines': ['import os, random', 'import numpy as np', 'from PIL import Image', 'import json', 'from tensorflow.keras.utils import Sequence', 'from common.data_utils import random_horizontal_flip, random_vertical_flip, random_brightness, random_grayscale, random_chroma, random_contrast, random_sharpness, random_blur, random_histeq, random_rotate_angle, crop_single_object, rotate_single_object, crop_image, normalize_image, transform_keypoints, generate_gt_heatmap', 'OUTPUT_STRIDE = 4', 'class keypoints_dataset(Sequence):'], 'executed_lines': {3, 4, 5, 6, 7, 9, 16, 19}, 'executed_function_lines': {19, 3}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE', 'from simple_baselines.postprocess import post_process_heatmap, post_process_heatmap_simple', 'def post_process_heatmap_simple(heatmap, conf_threshold=1e-6):', 'from common.data_utils import preprocess_image', 'from common.utils import get_classes, get_skeleton, render_skeleton, optimize_tf_gpu', 'def get_custom_objects():', 'def get_classes(classes_path):', 'def get_skeleton(skeleton_path):', 'def get_matchpoints(matchpoint_path):', 'def render_skeleton(image, keypoints_dict, skeleton_lines=None, conf_threshold=0.001, colors=None):', "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'", 'import tensorflow as tf', 'optimize_tf_gpu(tf, K)'], 'executed_lines': {3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 35, 39, 50, 58, 66, 74}, 'executed_function_lines': {13, 3, 5}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'optimize_tf_gpu', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 13, 'args': {'tf': {'type': "<class 'module'>", 'shape': <function shape_v2 at 0x7f499b1fa400>}, 'K': {'type': "<class 'module'>", 'shape': <function shape at 0x7f49960c41e0>}}, 'lines': ["if tf.__version__.startswith('2'):", "gpus = tf.config.experimental.list_physical_devices('GPU')", 'if gpus:'], 'executed_lines': {16, 14, 15}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE', 'from simple_baselines.postprocess import post_process_heatmap, post_process_heatmap_simple', 'def post_process_heatmap_simple(heatmap, conf_threshold=1e-6):', 'from common.data_utils import preprocess_image', 'from common.utils import get_classes, get_skeleton, render_skeleton, optimize_tf_gpu', 'def get_custom_objects():', 'def get_classes(classes_path):', 'def get_skeleton(skeleton_path):', 'def get_matchpoints(matchpoint_path):', 'def render_skeleton(image, keypoints_dict, skeleton_lines=None, conf_threshold=0.001, colors=None):', "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'", 'import tensorflow as tf', 'optimize_tf_gpu(tf, K)', '"model_type": \'resnet50_deconv\',', '"model_input_shape": (256, 256),', '"conf_threshold": 0.1,', '"classes_path": os.path.join(\'configs\', \'mpii_classes.txt\'),', '"skeleton_path": None,', '"weights_path": os.path.join(\'weights\', \'model.h5\'),', '"gpu_num" : 1,'], 'executed_lines': {3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 35, 39, 50, 58, 66, 74}, 'executed_function_lines': {35, 13, 3, 5}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'SimpleBaselines', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 35, 'args': {}, 'lines': ['class SimpleBaselines(object):', '_defaults = default_config', '@classmethod', 'def __init__(self, **kwargs):', 'def _generate_model(self):', 'def detect_image(self, image):', 'def predict(self, image_data):', 'def dump_model_file(self, output_model_file):'], 'executed_lines': {35, 36, 38, 71, 107, 45, 57, 95}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE', 'from simple_baselines.postprocess import post_process_heatmap, post_process_heatmap_simple', 'def post_process_heatmap_simple(heatmap, conf_threshold=1e-6):', 'from common.data_utils import preprocess_image', 'from common.utils import get_classes, get_skeleton, render_skeleton, optimize_tf_gpu', 'def get_custom_objects():', 'def get_classes(classes_path):', 'def get_skeleton(skeleton_path):', 'def get_matchpoints(matchpoint_path):', 'def render_skeleton(image, keypoints_dict, skeleton_lines=None, conf_threshold=0.001, colors=None):', "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'", 'import tensorflow as tf', 'optimize_tf_gpu(tf, K)', '"model_type": \'resnet50_deconv\',', '"model_input_shape": (256, 256),', '"conf_threshold": 0.1,', '"classes_path": os.path.join(\'configs\', \'mpii_classes.txt\'),', '"skeleton_path": None,', '"weights_path": os.path.join(\'weights\', \'model.h5\'),', '"gpu_num" : 1,', 'def detect_video(simple_baselines, video_path, output_path=""):', 'def detect_img(simple_baselines):', 'if __name__ == "__main__":', "parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS, description='demo or dump out SimpleBaselines h5 model')", 'parser.add_argument(', "'--model_type', type=str,", 'help=\'model type, default \' + str(SimpleBaselines.get_defaults("model_type"))'], 'executed_lines': {3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 158, 35, 39, 171, 173, 177, 50, 178, 179, 58, 66, 74, 111}, 'executed_function_lines': {35, 3, 5, 38, 13}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'get_defaults', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 38, 'args': {'cls': {'type': "<class 'type'>", 'shape': None}, 'n': {'type': "<class 'str'>", 'shape': (10,)}}, 'lines': ['if n in cls._defaults:', 'return cls._defaults[n]'], 'executed_lines': {40, 41}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'str'>", 'shape': (15,)}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE', 'from simple_baselines.postprocess import post_process_heatmap, post_process_heatmap_simple', 'def post_process_heatmap_simple(heatmap, conf_threshold=1e-6):', 'from common.data_utils import preprocess_image', 'from common.utils import get_classes, get_skeleton, render_skeleton, optimize_tf_gpu', 'def get_custom_objects():', 'def get_classes(classes_path):', 'def get_skeleton(skeleton_path):', 'def get_matchpoints(matchpoint_path):', 'def render_skeleton(image, keypoints_dict, skeleton_lines=None, conf_threshold=0.001, colors=None):', "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'", 'import tensorflow as tf', 'optimize_tf_gpu(tf, K)', '"model_type": \'resnet50_deconv\',', '"model_input_shape": (256, 256),', '"conf_threshold": 0.1,', '"classes_path": os.path.join(\'configs\', \'mpii_classes.txt\'),', '"skeleton_path": None,', '"weights_path": os.path.join(\'weights\', \'model.h5\'),', '"gpu_num" : 1,', 'def detect_video(simple_baselines, video_path, output_path=""):', 'def detect_img(simple_baselines):', 'if __name__ == "__main__":', "parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS, description='demo or dump out SimpleBaselines h5 model')", 'parser.add_argument(', "'--model_type', type=str,", 'help=\'model type, default \' + str(SimpleBaselines.get_defaults("model_type"))', 'parser.add_argument(', "'--model_input_shape', type=str,", 'str(SimpleBaselines.get_defaults("model_input_shape")[0])+\'x\'+str(SimpleBaselines.get_defaults("model_input_shape")[1]),', 'if n in cls._defaults:', 'return cls._defaults[n]', 'default=str(SimpleBaselines.get_defaults("model_input_shape")[0])+\'x\'+str(SimpleBaselines.get_defaults("model_input_shape")[1])', 'parser.add_argument(', "'--weights_path', type=str,", 'help=\'path to model weight file, default \' + SimpleBaselines.get_defaults("weights_path")', 'parser.add_argument(', "'--classes_path', type=str, required=False,", 'help=\'path to keypoint class definitions, default \' + SimpleBaselines.get_defaults("classes_path")', 'parser.add_argument(', "'--skeleton_path', type=str, required=False,", 'help=\'path to keypoint skeleton definitions, default \' + str(SimpleBaselines.get_defaults("skeleton_path"))', 'parser.add_argument(', "'--conf_threshold', type=float,", 'help=\'confidence threshold, default \' + str(SimpleBaselines.get_defaults("conf_threshold"))', 'parser.add_argument(', '\'--image\', default=False, action="store_true",', "help='Image detection mode, will ignore all positional arguments'", 'parser.add_argument(', '"--input", nargs=\'?\', type=str,required=False,default=\'./path2your_video\',', 'help = "Video input path"', 'parser.add_argument(', '"--output", nargs=\'?\', type=str, default="",', 'help = "[Optional] Video output path"', 'parser.add_argument(', '\'--dump_model\', default=False, action="store_true",', "help='Dump out training model to inference model'", 'parser.add_argument(', "'--output_model_file', type=str,", "help='output inference model file'", 'args = parser.parse_args()', 'if args.model_input_shape:', "height, width = args.model_input_shape.split('x')", 'args.model_input_shape = (int(height), int(width))', 'simple_baselines = SimpleBaselines(**vars(args))'], 'executed_lines': {3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 158, 35, 39, 40, 41, 171, 173, 177, 50, 178, 179, 181, 182, 184, 185, 58, 187, 188, 189, 191, 192, 193, 66, 195, 196, 197, 199, 200, 201, 74, 204, 205, 206, 211, 212, 213, 215, 216, 217, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 111, 239}, 'executed_function_lines': {35, 3, 5, 38, 13, 45}, 'extra_calls': 0, 'return_value': {'type': "<class 'float'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 45, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ['super(SimpleBaselines, self).__init__()', 'self.__dict__.update(self._defaults) # set up default values', 'self.__dict__.update(kwargs) # and update with user overrides', 'if self.skeleton_path:', 'self.skeleton_lines = get_skeleton(self.skeleton_path)'], 'executed_lines': {46, 47, 48, 49, 50}, 'executed_function_lines': {58}, 'extra_calls': 0}

{'function_name': 'get_skeleton', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 58, 'args': {'skeleton_path': {'type': "<class 'str'>", 'shape': (112,)}}, 'lines': ['with open(skeleton_path) as f:', 'skeleton_lines = f.readlines()', 'skeleton_lines = [s.strip() for s in skeleton_lines]'], 'executed_lines': {60, 61, 62}, 'executed_function_lines': {62}, 'extra_calls': 0}

{'function_name': '<listcomp>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 62, 'args': {'.0': {'type': "<class 'list_iterator'>", 'shape': None}}, 'lines': ['skeleton_lines = [s.strip() for s in skeleton_lines]'], 'executed_lines': {62}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (15,)}}

{'function_name': 'get_skeleton', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 58, 'args': {'skeleton_path': {'type': "<class 'str'>", 'shape': (112,)}}, 'lines': ['with open(skeleton_path) as f:', 'skeleton_lines = f.readlines()', 'skeleton_lines = [s.strip() for s in skeleton_lines]', 'return skeleton_lines'], 'executed_lines': {60, 61, 62, 63}, 'executed_function_lines': {62}, 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (15,)}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 45, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ['super(SimpleBaselines, self).__init__()', 'self.__dict__.update(self._defaults) # set up default values', 'self.__dict__.update(kwargs) # and update with user overrides', 'if self.skeleton_path:', 'self.skeleton_lines = get_skeleton(self.skeleton_path)', 'self.class_names = get_classes(self.classes_path)'], 'executed_lines': {46, 47, 48, 49, 50, 53}, 'executed_function_lines': {58, 50}, 'extra_calls': 0}

{'function_name': 'get_classes', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 50, 'args': {'classes_path': {'type': "<class 'str'>", 'shape': (111,)}}, 'lines': ['with open(classes_path) as f:', 'class_names = f.readlines()', 'class_names = [c.strip() for c in class_names]'], 'executed_lines': {52, 53, 54}, 'executed_function_lines': {54}, 'extra_calls': 0}

{'function_name': '<listcomp>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 54, 'args': {'.0': {'type': "<class 'list_iterator'>", 'shape': None}}, 'lines': ['class_names = [c.strip() for c in class_names]'], 'executed_lines': {54}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (16,)}}

{'function_name': 'get_classes', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 50, 'args': {'classes_path': {'type': "<class 'str'>", 'shape': (111,)}}, 'lines': ['with open(classes_path) as f:', 'class_names = f.readlines()', 'class_names = [c.strip() for c in class_names]', 'return class_names'], 'executed_lines': {52, 53, 54, 55}, 'executed_function_lines': {54}, 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (16,)}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 45, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ['super(SimpleBaselines, self).__init__()', 'self.__dict__.update(self._defaults) # set up default values', 'self.__dict__.update(kwargs) # and update with user overrides', 'if self.skeleton_path:', 'self.skeleton_lines = get_skeleton(self.skeleton_path)', 'self.class_names = get_classes(self.classes_path)', 'self.model = self._generate_model()'], 'executed_lines': {46, 47, 48, 49, 50, 53, 54}, 'executed_function_lines': {57, 58, 50}, 'extra_calls': 0}

{'function_name': '_generate_model', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 57, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ['weights_path = os.path.expanduser(self.weights_path)', "assert weights_path.endswith('.h5'), 'Keras model or weights must be a .h5 file.'", 'num_classes = len(self.class_names)', 'model = get_simple_baselines_model(self.model_type, num_classes, model_input_shape=self.model_input_shape)'], 'executed_lines': {65, 59, 60, 62}, 'executed_function_lines': {45}, 'extra_calls': 0}

{'function_name': 'get_simple_baselines_model', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 45, 'args': {'model_type': {'type': "<class 'str'>", 'shape': (15,)}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'model_input_shape': {'type': "<class 'tuple'>", 'shape': (2,)}, 'freeze_level': {'type': "<class 'int'>", 'shape': None}, 'weights_path': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['base_model = get_base_model(model_type, model_input_shape)'], 'executed_lines': {47}, 'executed_function_lines': {18}, 'extra_calls': 0}

{'function_name': 'get_base_model', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 18, 'args': {'model_type': {'type': "<class 'str'>", 'shape': (15,)}, 'model_input_shape': {'type': "<class 'tuple'>", 'shape': (2,)}, 'weights': {'type': "<class 'str'>", 'shape': (8,)}}, 'lines': ['if model_input_shape:', "input_tensor = Input(shape=model_input_shape+(3,), batch_size=None, name='image_input')", "if model_type.startswith('mobilenetv1'):", "elif model_type.startswith('mobilenetv2'):", "elif model_type.startswith('mobilenetv3large'):", "elif model_type.startswith('mobilenetv3small'):", "elif model_type.startswith('peleenet'):", "elif model_type.startswith('ghostnet'):", "elif model_type.startswith('resnet50'):", 'model = ResNet50(input_tensor=input_tensor, weights=weights, pooling=None, include_top=False)', 'return model'], 'executed_lines': {33, 35, 37, 38, 42, 20, 21, 25, 27, 29, 31}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'keras.engine.functional.Functional'>", 'shape': None}}

{'function_name': 'get_simple_baselines_model', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 45, 'args': {'model_type': {'type': "<class 'str'>", 'shape': (15,)}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'model_input_shape': {'type': "<class 'tuple'>", 'shape': (2,)}, 'freeze_level': {'type': "<class 'int'>", 'shape': None}, 'weights_path': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['base_model = get_base_model(model_type, model_input_shape)', 'backbone_len = len(base_model.layers)', 'x = base_model.output', 'num_layers = 3', 'deconv_channels = [256, 256, 256]', 'deconv_kernels = [4, 4, 4]', 'use_bias=True', "if model_type.endswith('_deconv'):", 'x = Deconv_block(x, num_layers, deconv_channels, deconv_kernels, use_bias=use_bias)'], 'executed_lines': {47, 48, 50, 53, 54, 55, 56, 59, 60}, 'executed_function_lines': {18, 23}, 'extra_calls': 0}

{'function_name': 'Deconv_block', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/layers.py', 'lineno': 23, 'args': {'x': {'type': "<class 'keras.engine.keras_tensor.KerasTensor'>", 'shape': TensorShape([None, 8, 8, 2048])}, 'num_layers': {'type': "<class 'int'>", 'shape': None}, 'deconv_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'deconv_kernels': {'type': "<class 'list'>", 'shape': (3,)}, 'use_bias': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['assert num_layers == len(deconv_channels), \\', 'assert num_layers == len(deconv_kernels), \\', 'for i in range(num_layers):', 'kernel, padding, output_padding = get_deconv_cfg(deconv_kernels[i], i)'], 'executed_lines': {24, 26, 29, 30}, 'executed_function_lines': {9}, 'extra_calls': 0}

{'function_name': 'get_deconv_cfg', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/layers.py', 'lineno': 9, 'args': {'deconv_kernel': {'type': "<class 'int'>", 'shape': None}, 'index': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['if deconv_kernel == 4:', "padding = 'same'", 'output_padding = None', 'return deconv_kernel, padding, output_padding'], 'executed_lines': {10, 11, 12, 20}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'tuple'>", 'shape': (3,)}}

{'function_name': 'Deconv_block', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/layers.py', 'lineno': 23, 'args': {'x': {'type': "<class 'keras.engine.keras_tensor.KerasTensor'>", 'shape': TensorShape([None, 8, 8, 2048])}, 'num_layers': {'type': "<class 'int'>", 'shape': None}, 'deconv_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'deconv_kernels': {'type': "<class 'list'>", 'shape': (3,)}, 'use_bias': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['assert num_layers == len(deconv_channels), \\', 'assert num_layers == len(deconv_kernels), \\', 'for i in range(num_layers):', 'kernel, padding, output_padding = get_deconv_cfg(deconv_kernels[i], i)', 'x = Conv2DTranspose(deconv_channels[i],', 'kernel,', 'strides=(2, 2),', 'padding=padding,', 'output_padding=output_padding,', 'use_bias=use_bias)(x)', 'x = BatchNormalization(momentum=BN_MOMENTUM)(x)', 'x = ReLU()(x)', 'if deconv_kernel == 4:', "padding = 'same'", 'output_padding = None', 'return deconv_kernel, padding, output_padding', 'return x'], 'executed_lines': {32, 33, 34, 35, 36, 37, 38, 39, 41, 10, 11, 12, 20, 24, 26, 29, 30}, 'executed_function_lines': {9}, 'extra_calls': 0, 'return_value': {'type': "<class 'keras.engine.keras_tensor.KerasTensor'>", 'shape': TensorShape([None, 64, 64, 256])}}

{'function_name': 'get_simple_baselines_model', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/model.py', 'lineno': 45, 'args': {'model_type': {'type': "<class 'str'>", 'shape': (15,)}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'model_input_shape': {'type': "<class 'tuple'>", 'shape': (2,)}, 'freeze_level': {'type': "<class 'int'>", 'shape': None}, 'weights_path': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['base_model = get_base_model(model_type, model_input_shape)', 'backbone_len = len(base_model.layers)', 'x = base_model.output', 'num_layers = 3', 'deconv_channels = [256, 256, 256]', 'deconv_kernels = [4, 4, 4]', 'use_bias=True', "if model_type.endswith('_deconv'):", 'x = Deconv_block(x, num_layers, deconv_channels, deconv_kernels, use_bias=use_bias)', "prediction = Conv2D(num_classes, kernel_size=(1, 1), activation='linear', padding='same',", "name='heatmap_predict')(x)", 'model = Model(inputs=base_model.input, outputs=prediction)', 'if weights_path:', 'if freeze_level in [1, 2]:', 'elif freeze_level == 0:', 'for i in range(len(model.layers)):', 'model.layers[i].trainable= True', "print('Unfreeze all of the layers.')", 'return model'], 'executed_lines': {69, 70, 90, 88, 73, 75, 47, 48, 79, 50, 84, 53, 54, 55, 56, 86, 87, 59, 60}, 'executed_function_lines': {18, 23}, 'extra_calls': 0, 'return_value': {'type': "<class 'keras.engine.functional.Functional'>", 'shape': None}}

{'function_name': '_generate_model', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 57, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ['weights_path = os.path.expanduser(self.weights_path)', "assert weights_path.endswith('.h5'), 'Keras model or weights must be a .h5 file.'", 'num_classes = len(self.class_names)', 'model = get_simple_baselines_model(self.model_type, num_classes, model_input_shape=self.model_input_shape)', 'model.load_weights(weights_path, by_name=False)#, skip_mismatch=True)', 'model.summary()', 'return model'], 'executed_lines': {65, 66, 67, 68, 59, 60, 62}, 'executed_function_lines': {45}, 'extra_calls': 0, 'return_value': {'type': "<class 'keras.engine.functional.Functional'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 45, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ['super(SimpleBaselines, self).__init__()', 'self.__dict__.update(self._defaults) # set up default values', 'self.__dict__.update(kwargs) # and update with user overrides', 'if self.skeleton_path:', 'self.skeleton_lines = get_skeleton(self.skeleton_path)', 'self.class_names = get_classes(self.classes_path)', 'self.model = self._generate_model()', 'K.set_learning_phase(0)'], 'executed_lines': {46, 47, 48, 49, 50, 53, 54, 55}, 'executed_function_lines': {57, 58, 50}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE', 'from simple_baselines.postprocess import post_process_heatmap, post_process_heatmap_simple', 'def post_process_heatmap_simple(heatmap, conf_threshold=1e-6):', 'from common.data_utils import preprocess_image', 'from common.utils import get_classes, get_skeleton, render_skeleton, optimize_tf_gpu', 'def get_custom_objects():', 'def get_classes(classes_path):', 'def get_skeleton(skeleton_path):', 'def get_matchpoints(matchpoint_path):', 'def render_skeleton(image, keypoints_dict, skeleton_lines=None, conf_threshold=0.001, colors=None):', "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'", 'import tensorflow as tf', 'optimize_tf_gpu(tf, K)', '"model_type": \'resnet50_deconv\',', '"model_input_shape": (256, 256),', '"conf_threshold": 0.1,', '"classes_path": os.path.join(\'configs\', \'mpii_classes.txt\'),', '"skeleton_path": None,', '"weights_path": os.path.join(\'weights\', \'model.h5\'),', '"gpu_num" : 1,', 'def detect_video(simple_baselines, video_path, output_path=""):', 'def detect_img(simple_baselines):', 'if __name__ == "__main__":', "parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS, description='demo or dump out SimpleBaselines h5 model')", 'parser.add_argument(', "'--model_type', type=str,", 'help=\'model type, default \' + str(SimpleBaselines.get_defaults("model_type"))', 'parser.add_argument(', "'--model_input_shape', type=str,", 'str(SimpleBaselines.get_defaults("model_input_shape")[0])+\'x\'+str(SimpleBaselines.get_defaults("model_input_shape")[1]),', 'if n in cls._defaults:', 'return cls._defaults[n]', 'default=str(SimpleBaselines.get_defaults("model_input_shape")[0])+\'x\'+str(SimpleBaselines.get_defaults("model_input_shape")[1])', 'parser.add_argument(', "'--weights_path', type=str,", 'help=\'path to model weight file, default \' + SimpleBaselines.get_defaults("weights_path")', 'parser.add_argument(', "'--classes_path', type=str, required=False,", 'help=\'path to keypoint class definitions, default \' + SimpleBaselines.get_defaults("classes_path")', 'parser.add_argument(', "'--skeleton_path', type=str, required=False,", 'help=\'path to keypoint skeleton definitions, default \' + str(SimpleBaselines.get_defaults("skeleton_path"))', 'parser.add_argument(', "'--conf_threshold', type=float,", 'help=\'confidence threshold, default \' + str(SimpleBaselines.get_defaults("conf_threshold"))', 'parser.add_argument(', '\'--image\', default=False, action="store_true",', "help='Image detection mode, will ignore all positional arguments'", 'parser.add_argument(', '"--input", nargs=\'?\', type=str,required=False,default=\'./path2your_video\',', 'help = "Video input path"', 'parser.add_argument(', '"--output", nargs=\'?\', type=str, default="",', 'help = "[Optional] Video output path"', 'parser.add_argument(', '\'--dump_model\', default=False, action="store_true",', "help='Dump out training model to inference model'", 'parser.add_argument(', "'--output_model_file', type=str,", "help='output inference model file'", 'args = parser.parse_args()', 'if args.model_input_shape:', "height, width = args.model_input_shape.split('x')", 'args.model_input_shape = (int(height), int(width))', 'simple_baselines = SimpleBaselines(**vars(args))', 'if args.dump_model:', 'if args.image:', 'print("Image detection mode")', 'if "input" in args:', 'print(" Ignoring remaining command line arguments: " + args.input + "," + args.output)', 'detect_img(simple_baselines)'], 'executed_lines': {256, 257, 258, 3, 4, 5, 6, 7, 8, 9, 10, 259, 12, 13, 14, 15, 16, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 158, 35, 39, 40, 41, 171, 173, 177, 50, 178, 179, 181, 182, 184, 185, 58, 187, 188, 189, 191, 192, 193, 66, 195, 196, 197, 199, 200, 201, 74, 204, 205, 206, 211, 212, 213, 215, 216, 217, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 111, 239, 241, 252}, 'executed_function_lines': {35, 3, 5, 38, 13, 45, 158}, 'extra_calls': 0, 'return_value': {'type': "<class 'float'>", 'shape': None}}

{'function_name': 'detect_img', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 158, 'args': {'simple_baselines': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ["img = input('Input image filename:')", 'try:', "image = Image.open(img).convert('RGB')", 'r_image = simple_baselines.detect_image(image)'], 'executed_lines': {160, 161, 162, 166}, 'executed_function_lines': {71}, 'extra_calls': 0}

{'function_name': 'detect_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 71, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}, 'image': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}}, 'lines': ['image_data = preprocess_image(image, self.model_input_shape)'], 'executed_lines': {72}, 'executed_function_lines': {667}, 'extra_calls': 0}

{'function_name': 'preprocess_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/data_utils.py', 'lineno': 667, 'args': {'image': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}, 'model_input_shape': {'type': "<class 'tuple'>", 'shape': (2,)}, 'mean': {'type': "<class 'tuple'>", 'shape': (3,)}}, 'lines': ['resized_image = image.resize(tuple(reversed(model_input_shape)), Image.BICUBIC)', "image_data = np.asarray(resized_image).astype('float32')", 'mean = np.array(mean, dtype=np.float)', 'image_data = normalize_image(image_data, mean)'], 'executed_lines': {681, 682, 684, 685}, 'executed_function_lines': {641}, 'extra_calls': 0}

{'function_name': 'normalize_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/data_utils.py', 'lineno': 641, 'args': {'imgdata': {'type': "<class 'numpy.ndarray'>", 'shape': (256, 256, 3)}, 'color_mean': {'type': "<class 'numpy.ndarray'>", 'shape': (3,)}}, 'lines': ['imgdata = imgdata / 255.0', 'for i in range(imgdata.shape[-1]):', 'imgdata[:, :, i] -= color_mean[i]', 'return imgdata'], 'executed_lines': {648, 649, 651, 646}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'numpy.ndarray'>", 'shape': (256, 256, 3)}}

{'function_name': 'preprocess_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/data_utils.py', 'lineno': 667, 'args': {'image': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}, 'model_input_shape': {'type': "<class 'tuple'>", 'shape': (2,)}, 'mean': {'type': "<class 'tuple'>", 'shape': (3,)}}, 'lines': ['resized_image = image.resize(tuple(reversed(model_input_shape)), Image.BICUBIC)', "image_data = np.asarray(resized_image).astype('float32')", 'mean = np.array(mean, dtype=np.float)', 'image_data = normalize_image(image_data, mean)', 'image_data = np.expand_dims(image_data, 0)  # Add batch dimension', 'return image_data'], 'executed_lines': {681, 682, 684, 685, 686, 687}, 'executed_function_lines': {641}, 'extra_calls': 0, 'return_value': {'type': "<class 'numpy.ndarray'>", 'shape': (1, 256, 256, 3)}}

{'function_name': 'detect_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 71, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}, 'image': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}}, 'lines': ['image_data = preprocess_image(image, self.model_input_shape)', 'image_size = image.size', 'scale = (image_size[0] * 1.0 / self.model_input_shape[1], image_size[1] * 1.0 / self.model_input_shape[0])', 'start = time.time()', 'keypoints = self.predict(image_data)'], 'executed_lines': {72, 76, 77, 79, 80}, 'executed_function_lines': {667, 95}, 'extra_calls': 0}

{'function_name': 'predict', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 95, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}, 'image_data': {'type': "<class 'numpy.ndarray'>", 'shape': (1, 256, 256, 3)}}, 'lines': ['prediction = self.model.predict(image_data)', 'if isinstance(prediction, list):', 'heatmap = prediction[0]', 'keypoints = post_process_heatmap_simple(heatmap)'], 'executed_lines': {97, 98, 100, 103}, 'executed_function_lines': {39}, 'extra_calls': 0}

{'function_name': 'post_process_heatmap_simple', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/simple_baselines/postprocess.py', 'lineno': 39, 'args': {'heatmap': {'type': "<class 'numpy.ndarray'>", 'shape': (64, 64, 16)}, 'conf_threshold': {'type': "<class 'float'>", 'shape': None}}, 'lines': ['keypoint_list = list()', 'for i in range(heatmap.shape[-1]):', '_map = heatmap[:, :, i]', 'under_th_indices = _map < conf_threshold', '_map[under_th_indices] = 0', 'y, x = np.where(_map == _map.max())', 'if len(x) > 0 and len(y) > 0:', 'keypoint_list.append((int(x[0]), int(y[0]), _map[y[0], x[0]]))', 'return keypoint_list'], 'executed_lines': {44, 45, 47, 49, 50, 54, 55, 56, 59}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (16,)}}

{'function_name': 'predict', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 95, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}, 'image_data': {'type': "<class 'numpy.ndarray'>", 'shape': (1, 256, 256, 3)}}, 'lines': ['prediction = self.model.predict(image_data)', 'if isinstance(prediction, list):', 'heatmap = prediction[0]', 'keypoints = post_process_heatmap_simple(heatmap)', 'return keypoints'], 'executed_lines': {97, 98, 100, 103, 105}, 'executed_function_lines': {39}, 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (16,)}}

{'function_name': 'detect_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 71, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}, 'image': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}}, 'lines': ['image_data = preprocess_image(image, self.model_input_shape)', 'image_size = image.size', 'scale = (image_size[0] * 1.0 / self.model_input_shape[1], image_size[1] * 1.0 / self.model_input_shape[0])', 'start = time.time()', 'keypoints = self.predict(image_data)', 'end = time.time()', 'print("Inference time: {:.8f}s".format(end - start))', 'keypoints_dict = dict()', 'for i, keypoint in enumerate(keypoints):', 'keypoints_dict[self.class_names[i]] = (keypoint[0] * scale[0] * OUTPUT_STRIDE, keypoint[1] * scale[1] * OUTPUT_STRIDE, keypoint[2])', "image_array = np.array(image, dtype='uint8')", 'image_array = render_skeleton(image_array, keypoints_dict, self.skeleton_lines, self.conf_threshold)'], 'executed_lines': {72, 76, 77, 79, 80, 81, 82, 85, 86, 87, 90, 91}, 'executed_function_lines': {74, 667, 95}, 'extra_calls': 0}

{'function_name': 'render_skeleton', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 74, 'args': {'image': {'type': "<class 'numpy.ndarray'>", 'shape': (640, 640, 3)}, 'keypoints_dict': {'type': "<class 'dict'>", 'shape': (16,)}, 'skeleton_lines': {'type': "<class 'list'>", 'shape': (15,)}, 'conf_threshold': {'type': "<class 'float'>", 'shape': None}, 'colors': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['def get_color(color_pattern):', 'def draw_line(img, start_point, end_point, color=(255, 0, 0)):', 'def draw_keypoints(img, key_points, color):', 'if skeleton_lines:', 'for skeleton_line in skeleton_lines:', "skeleton_list = skeleton_line.split(',')", 'color = colors', 'if color is None:', 'color = get_color(skeleton_list[2])'], 'executed_lines': {105, 112, 81, 113, 115, 116, 117, 118, 95}, 'executed_function_lines': {81}, 'extra_calls': 0}

{'function_name': 'get_color', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 81, 'args': {'color_pattern': {'type': "<class 'str'>", 'shape': (1,)}}, 'lines': ['color = (255, 0, 0)', "if color_pattern == 'r':", 'color = (255, 0, 0)', 'return color'], 'executed_lines': {82, 93, 84, 85}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'tuple'>", 'shape': (3,)}}

{'function_name': 'render_skeleton', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 74, 'args': {'image': {'type': "<class 'numpy.ndarray'>", 'shape': (640, 640, 3)}, 'keypoints_dict': {'type': "<class 'dict'>", 'shape': (16,)}, 'skeleton_lines': {'type': "<class 'list'>", 'shape': (15,)}, 'conf_threshold': {'type': "<class 'float'>", 'shape': None}, 'colors': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['def get_color(color_pattern):', 'def draw_line(img, start_point, end_point, color=(255, 0, 0)):', 'def draw_keypoints(img, key_points, color):', 'if skeleton_lines:', 'for skeleton_line in skeleton_lines:', "skeleton_list = skeleton_line.split(',')", 'color = colors', 'if color is None:', 'color = get_color(skeleton_list[2])', 'image = draw_line(image, keypoints_dict[skeleton_list[0]], keypoints_dict[skeleton_list[1]], color=color)'], 'executed_lines': {105, 112, 81, 113, 115, 116, 117, 118, 119, 95}, 'executed_function_lines': {81, 95}, 'extra_calls': 0}

{'function_name': 'draw_line', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 95, 'args': {'img': {'type': "<class 'numpy.ndarray'>", 'shape': (640, 640, 3)}, 'start_point': {'type': "<class 'tuple'>", 'shape': (3,)}, 'end_point': {'type': "<class 'tuple'>", 'shape': (3,)}, 'color': {'type': "<class 'tuple'>", 'shape': (3,)}}, 'lines': ['x_start, y_start, conf_start = start_point', 'x_end, y_end, conf_end = end_point', 'if (x_start > 1 and y_start > 1 and conf_start > conf_threshold) and (x_end > 1 and y_end > 1 and conf_end > conf_threshold):', 'return img'], 'executed_lines': {96, 97, 99, 103}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'numpy.ndarray'>", 'shape': (640, 640, 3)}}

{'function_name': 'render_skeleton', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/common/utils.py', 'lineno': 74, 'args': {'image': {'type': "<class 'numpy.ndarray'>", 'shape': (640, 640, 3)}, 'keypoints_dict': {'type': "<class 'dict'>", 'shape': (16,)}, 'skeleton_lines': {'type': "<class 'list'>", 'shape': (15,)}, 'conf_threshold': {'type': "<class 'float'>", 'shape': None}, 'colors': {'type': "<class 'NoneType'>", 'shape': None}}, 'lines': ['def get_color(color_pattern):', 'def draw_line(img, start_point, end_point, color=(255, 0, 0)):', 'def draw_keypoints(img, key_points, color):', 'if skeleton_lines:', 'for skeleton_line in skeleton_lines:', "skeleton_list = skeleton_line.split(',')", 'color = colors', 'if color is None:', 'color = get_color(skeleton_list[2])', 'image = draw_line(image, keypoints_dict[skeleton_list[0]], keypoints_dict[skeleton_list[1]], color=color)', 'color = (255, 0, 0)', "if color_pattern == 'r':", 'color = (255, 0, 0)', 'return color', 'x_start, y_start, conf_start = start_point', 'x_end, y_end, conf_end = end_point', 'if (x_start > 1 and y_start > 1 and conf_start > conf_threshold) and (x_end > 1 and y_end > 1 and conf_end > conf_threshold):', 'cv2.circle(img, center=(int(x_start), int(y_start)), color=color, radius=3, thickness=-1)', 'cv2.circle(img, center=(int(x_end), int(y_end)), color=color, radius=3, thickness=-1)', 'cv2.line(img, (int(x_start), int(y_start)), (int(x_end), int(y_end)), color=color, thickness=1)', 'return img', "elif color_pattern == 'g':", "elif color_pattern == 'b':", 'color = (0, 0, 255)', 'return image'], 'executed_lines': {81, 82, 84, 85, 86, 88, 89, 93, 95, 96, 97, 99, 100, 101, 102, 103, 105, 112, 113, 115, 116, 117, 118, 119, 125}, 'executed_function_lines': {81, 95}, 'extra_calls': 0, 'return_value': {'type': "<class 'numpy.ndarray'>", 'shape': (640, 640, 3)}}

{'function_name': 'detect_image', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 71, 'args': {'self': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}, 'image': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}}, 'lines': ['image_data = preprocess_image(image, self.model_input_shape)', 'image_size = image.size', 'scale = (image_size[0] * 1.0 / self.model_input_shape[1], image_size[1] * 1.0 / self.model_input_shape[0])', 'start = time.time()', 'keypoints = self.predict(image_data)', 'end = time.time()', 'print("Inference time: {:.8f}s".format(end - start))', 'keypoints_dict = dict()', 'for i, keypoint in enumerate(keypoints):', 'keypoints_dict[self.class_names[i]] = (keypoint[0] * scale[0] * OUTPUT_STRIDE, keypoint[1] * scale[1] * OUTPUT_STRIDE, keypoint[2])', "image_array = np.array(image, dtype='uint8')", 'image_array = render_skeleton(image_array, keypoints_dict, self.skeleton_lines, self.conf_threshold)', 'return Image.fromarray(image_array)'], 'executed_lines': {72, 76, 77, 79, 80, 81, 82, 85, 86, 87, 90, 91, 93}, 'executed_function_lines': {74, 667, 95}, 'extra_calls': 0, 'return_value': {'type': "<class 'PIL.Image.Image'>", 'shape': (640, 640)}}

{'function_name': 'detect_img', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 158, 'args': {'simple_baselines': {'type': "<class '__main__.SimpleBaselines'>", 'shape': None}}, 'lines': ["img = input('Input image filename:')", 'try:', "image = Image.open(img).convert('RGB')", 'r_image = simple_baselines.detect_image(image)', 'r_image.show()'], 'executed_lines': {160, 161, 162, 166, 167}, 'executed_function_lines': {71}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/tf-keras-simple-baselines-keypoint-detection/demo.py', 'lineno': 3, 'args': {}, 'lines': ['import os, sys, argparse', 'import cv2', 'from PIL import Image', 'import numpy as np', 'import time', 'from timeit import default_timer as timer', 'from tensorflow.keras.models import Model, load_model', 'import tensorflow.keras.backend as K', 'from simple_baselines.model import get_simple_baselines_model', 'from simple_baselines.data import OUTPUT_STRIDE', 'from simple_baselines.postprocess import post_process_heatmap, post_process_heatmap_simple', 'def post_process_heatmap_simple(heatmap, conf_threshold=1e-6):', 'from common.data_utils import preprocess_image', 'from common.utils import get_classes, get_skeleton, render_skeleton, optimize_tf_gpu', 'def get_custom_objects():', 'def get_classes(classes_path):', 'def get_skeleton(skeleton_path):', 'def get_matchpoints(matchpoint_path):', 'def render_skeleton(image, keypoints_dict, skeleton_lines=None, conf_threshold=0.001, colors=None):', "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'", 'import tensorflow as tf', 'optimize_tf_gpu(tf, K)', '"model_type": \'resnet50_deconv\',', '"model_input_shape": (256, 256),', '"conf_threshold": 0.1,', '"classes_path": os.path.join(\'configs\', \'mpii_classes.txt\'),', '"skeleton_path": None,', '"weights_path": os.path.join(\'weights\', \'model.h5\'),', '"gpu_num" : 1,', 'def detect_video(simple_baselines, video_path, output_path=""):', 'def detect_img(simple_baselines):', 'if __name__ == "__main__":', "parser = argparse.ArgumentParser(argument_default=argparse.SUPPRESS, description='demo or dump out SimpleBaselines h5 model')", 'parser.add_argument(', "'--model_type', type=str,", 'help=\'model type, default \' + str(SimpleBaselines.get_defaults("model_type"))', 'parser.add_argument(', "'--model_input_shape', type=str,", 'str(SimpleBaselines.get_defaults("model_input_shape")[0])+\'x\'+str(SimpleBaselines.get_defaults("model_input_shape")[1]),', 'if n in cls._defaults:', 'return cls._defaults[n]', 'default=str(SimpleBaselines.get_defaults("model_input_shape")[0])+\'x\'+str(SimpleBaselines.get_defaults("model_input_shape")[1])', 'parser.add_argument(', "'--weights_path', type=str,", 'help=\'path to model weight file, default \' + SimpleBaselines.get_defaults("weights_path")', 'parser.add_argument(', "'--classes_path', type=str, required=False,", 'help=\'path to keypoint class definitions, default \' + SimpleBaselines.get_defaults("classes_path")', 'parser.add_argument(', "'--skeleton_path', type=str, required=False,", 'help=\'path to keypoint skeleton definitions, default \' + str(SimpleBaselines.get_defaults("skeleton_path"))', 'parser.add_argument(', "'--conf_threshold', type=float,", 'help=\'confidence threshold, default \' + str(SimpleBaselines.get_defaults("conf_threshold"))', 'parser.add_argument(', '\'--image\', default=False, action="store_true",', "help='Image detection mode, will ignore all positional arguments'", 'parser.add_argument(', '"--input", nargs=\'?\', type=str,required=False,default=\'./path2your_video\',', 'help = "Video input path"', 'parser.add_argument(', '"--output", nargs=\'?\', type=str, default="",', 'help = "[Optional] Video output path"', 'parser.add_argument(', '\'--dump_model\', default=False, action="store_true",', "help='Dump out training model to inference model'", 'parser.add_argument(', "'--output_model_file', type=str,", "help='output inference model file'", 'args = parser.parse_args()', 'if args.model_input_shape:', "height, width = args.model_input_shape.split('x')", 'args.model_input_shape = (int(height), int(width))', 'simple_baselines = SimpleBaselines(**vars(args))', 'if args.dump_model:', 'if args.image:', 'print("Image detection mode")', 'if "input" in args:', 'print(" Ignoring remaining command line arguments: " + args.input + "," + args.output)', 'detect_img(simple_baselines)'], 'executed_lines': {256, 257, 258, 3, 4, 5, 6, 7, 8, 9, 10, 259, 12, 13, 14, 15, 16, 18, 20, 21, 25, 26, 27, 28, 29, 30, 31, 158, 35, 39, 40, 41, 171, 173, 177, 50, 178, 179, 181, 182, 184, 185, 58, 187, 188, 189, 191, 192, 193, 66, 195, 196, 197, 199, 200, 201, 74, 204, 205, 206, 211, 212, 213, 215, 216, 217, 222, 223, 224, 227, 228, 229, 232, 234, 235, 236, 111, 239, 241, 252}, 'executed_function_lines': {35, 3, 5, 38, 13, 45, 158}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

