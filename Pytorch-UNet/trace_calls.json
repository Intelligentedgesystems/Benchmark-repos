[
    {
        "function_name": "<module>",
        "filename": "/media/sarthak/storage/Pipeline_Generator/Pytorch-UNet/predict.py",
        "lineno": 1,
        "args": {},
        "lines": [
            "import argparse",
            "import logging",
            "import os",
            "import numpy as np",
            "import torch",
            "import torch.nn.functional as F",
            "from PIL import Image",
            "from torchvision import transforms",
            "from utils.data_loading import BasicDataset",
            "from PIL import Image",
            "from os.path import splitext, isfile, join",
            "from torch.utils.data import Dataset",
            "from tqdm import tqdm",
            "def load_image(filename):",
            "def unique_mask_values(idx, mask_dir, mask_suffix):",
            "class BasicDataset(Dataset):",
            "class CarvanaDataset(BasicDataset):",
            "class Down(nn.Module):",
            "class Up(nn.Module):",
            "class OutConv(nn.Module):",
            "def predict_img(net,",
            "def get_args():",
            "def get_output_filenames(args):",
            "def mask_to_image(mask: np.ndarray, mask_values):",
            "if __name__ == '__main__':",
            "args = get_args()",
            "logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')",
            "in_files = args.input",
            "out_files = get_output_filenames(args)",
            "net = UNet(n_channels=3, n_classes=args.classes, bilinear=args.bilinear)",
            "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
            "logging.info(f'Loading model {args.model}')",
            "logging.info(f'Using device {device}')",
            "net.to(device=device)",
            "state_dict = torch.load(args.model, map_location=device)",
            "mask_values = state_dict.pop('mask_values', [0, 1])",
            "net.load_state_dict(state_dict)",
            "logging.info('Model loaded!')",
            "for i, filename in enumerate(in_files):",
            "logging.info(f'Predicting image {filename} ...')",
            "img = Image.open(filename)",
            "mask = predict_img(net=net,",
            "full_img=img,",
            "scale_factor=args.scale,",
            "out_threshold=args.mask_threshold,",
            "device=device)",
            "if not args.no_save:",
            "out_filename = out_files[i]",
            "result = mask_to_image(mask, mask_values)",
            "result.save(out_filename)",
            "logging.info(f'Mask saved to {out_filename}')"
        ],
        "executed_lines": 