{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 1, 'args': {}, 'lines': ['import os', 'import argparse', 'import torch', 'from torchvision import transforms', 'from models.fast_scnn import get_fast_scnn'], 'executed_lines': {1, 2, 3, 5, 6}, 'executed_function_lines': {1}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/__init__.py', 'lineno': 1, 'args': {}, 'lines': [], 'executed_lines': set(), 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 1, 'args': {}, 'lines': ['import os', 'import argparse', 'import torch', 'from torchvision import transforms', 'from models.fast_scnn import get_fast_scnn'], 'executed_lines': {1, 2, 3, 5, 6}, 'executed_function_lines': {1, 7}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):'], 'executed_lines': {7, 8, 9, 10, 11, 13, 16}, 'executed_function_lines': {16}, 'extra_calls': 0}

{'function_name': 'FastSCNN', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 16, 'args': {}, 'lines': ['class FastSCNN(nn.Module):', 'def __init__(self, num_classes, aux=False, **kwargs):', 'def forward(self, x):'], 'executed_lines': {16, 17, 33}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):'], 'executed_lines': {7, 8, 9, 10, 11, 13, 16, 49}, 'executed_function_lines': {16, 49}, 'extra_calls': 0}

{'function_name': '_ConvBNReLU', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 49, 'args': {}, 'lines': ['class _ConvBNReLU(nn.Module):', '"""Conv-BN-ReLU"""', 'def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=0, **kwargs):', 'def forward(self, x):'], 'executed_lines': {49, 50, 52, 60}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):'], 'executed_lines': {64, 7, 8, 9, 10, 11, 13, 16, 49}, 'executed_function_lines': {16, 49, 64}, 'extra_calls': 0}

{'function_name': '_DSConv', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 64, 'args': {}, 'lines': ['class _DSConv(nn.Module):', '"""Depthwise Separable Convolutions"""', 'def __init__(self, dw_channels, out_channels, stride=1, **kwargs):', 'def forward(self, x):'], 'executed_lines': {64, 65, 67, 78}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):'], 'executed_lines': {64, 7, 8, 9, 10, 11, 13, 16, 49, 82}, 'executed_function_lines': {16, 49, 82, 64}, 'extra_calls': 0}

{'function_name': '_DWConv', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 82, 'args': {}, 'lines': ['class _DWConv(nn.Module):', 'def __init__(self, dw_channels, out_channels, stride=1, **kwargs):', 'def forward(self, x):'], 'executed_lines': {91, 82, 83}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):'], 'executed_lines': {64, 7, 8, 9, 10, 11, 13, 16, 49, 82, 95}, 'executed_function_lines': {64, 16, 49, 82, 95}, 'extra_calls': 0}

{'function_name': 'LinearBottleneck', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 95, 'args': {}, 'lines': ['class LinearBottleneck(nn.Module):', '"""LinearBottleneck used in MobileNetV2"""', 'def __init__(self, in_channels, out_channels, t=6, stride=2, **kwargs):', 'def forward(self, x):'], 'executed_lines': {96, 98, 111, 95}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):', 'class PyramidPooling(nn.Module):'], 'executed_lines': {64, 7, 8, 9, 10, 11, 13, 16, 49, 82, 118, 95}, 'executed_function_lines': {64, 16, 49, 82, 118, 95}, 'extra_calls': 0}

{'function_name': 'PyramidPooling', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 118, 'args': {}, 'lines': ['class PyramidPooling(nn.Module):', '"""Pyramid pooling module"""', 'def __init__(self, in_channels, out_channels, **kwargs):', 'def pool(self, x, size):', 'def upsample(self, x, size):', 'def forward(self, x):'], 'executed_lines': {130, 134, 137, 118, 119, 121}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):', 'class PyramidPooling(nn.Module):', 'class LearningToDownsample(nn.Module):'], 'executed_lines': {64, 7, 8, 9, 10, 11, 13, 16, 49, 82, 148, 118, 95}, 'executed_function_lines': {64, 16, 49, 82, 148, 118, 95}, 'extra_calls': 0}

{'function_name': 'LearningToDownsample', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 148, 'args': {}, 'lines': ['class LearningToDownsample(nn.Module):', '"""Learning to downsample module"""', 'def __init__(self, dw_channels1=32, dw_channels2=48, out_channels=64, **kwargs):', 'def forward(self, x):'], 'executed_lines': {148, 149, 157, 151}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):', 'class PyramidPooling(nn.Module):', 'class LearningToDownsample(nn.Module):', 'class GlobalFeatureExtractor(nn.Module):'], 'executed_lines': {64, 164, 7, 8, 9, 10, 11, 13, 16, 49, 82, 148, 118, 95}, 'executed_function_lines': {64, 164, 16, 49, 82, 148, 118, 95}, 'extra_calls': 0}

{'function_name': 'GlobalFeatureExtractor', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 164, 'args': {}, 'lines': ['class GlobalFeatureExtractor(nn.Module):', '"""Global feature extractor module"""', 'def __init__(self, in_channels=64, block_channels=(64, 96, 128),', 'def _make_layer(self, block, inplanes, planes, blocks, t=6, stride=1):', 'def forward(self, x):'], 'executed_lines': {164, 165, 167, 175, 182}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):', 'class PyramidPooling(nn.Module):', 'class LearningToDownsample(nn.Module):', 'class GlobalFeatureExtractor(nn.Module):', 'class FeatureFusionModule(nn.Module):'], 'executed_lines': {64, 164, 7, 8, 9, 10, 11, 13, 16, 49, 82, 148, 118, 190, 95}, 'executed_function_lines': {64, 164, 16, 49, 82, 148, 118, 190, 95}, 'extra_calls': 0}

{'function_name': 'FeatureFusionModule', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 190, 'args': {}, 'lines': ['class FeatureFusionModule(nn.Module):', '"""Feature fusion module"""', 'def __init__(self, highter_in_channels, lower_in_channels, out_channels, scale_factor=4, **kwargs):', 'def forward(self, higher_res_feature, lower_res_feature):'], 'executed_lines': {193, 207, 190, 191}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):', 'class PyramidPooling(nn.Module):', 'class LearningToDownsample(nn.Module):', 'class GlobalFeatureExtractor(nn.Module):', 'class FeatureFusionModule(nn.Module):', 'class Classifer(nn.Module):'], 'executed_lines': {64, 164, 7, 8, 9, 10, 11, 13, 16, 49, 82, 148, 118, 217, 190, 95}, 'executed_function_lines': {64, 164, 16, 49, 82, 148, 118, 217, 190, 95}, 'extra_calls': 0}

{'function_name': 'Classifer', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 217, 'args': {}, 'lines': ['class Classifer(nn.Module):', '"""Classifer"""', 'def __init__(self, dw_channels, num_classes, stride=1, **kwargs):', 'def forward(self, x):'], 'executed_lines': {217, 218, 220, 229}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 7, 'args': {}, 'lines': ['"""Fast Segmentation Convolutional Neural Network"""', 'import os', 'import torch', 'import torch.nn as nn', 'import torch.nn.functional as F', "__all__ = ['FastSCNN', 'get_fast_scnn']", 'class FastSCNN(nn.Module):', 'class _ConvBNReLU(nn.Module):', 'class _DSConv(nn.Module):', 'class _DWConv(nn.Module):', 'class LinearBottleneck(nn.Module):', 'class PyramidPooling(nn.Module):', 'class LearningToDownsample(nn.Module):', 'class GlobalFeatureExtractor(nn.Module):', 'class FeatureFusionModule(nn.Module):', 'class Classifer(nn.Module):', "def get_fast_scnn(dataset='citys', pretrained=False, root='./weights', map_cpu=False, **kwargs):", "if __name__ == '__main__':"], 'executed_lines': {64, 164, 7, 8, 9, 10, 11, 236, 13, 16, 49, 82, 148, 118, 254, 217, 190, 95}, 'executed_function_lines': {64, 164, 16, 49, 82, 148, 118, 217, 190, 95}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 1, 'args': {}, 'lines': ['import os', 'import argparse', 'import torch', 'from torchvision import transforms', 'from models.fast_scnn import get_fast_scnn', 'from PIL import Image', 'from utils.visualize import get_color_pallete', "__all__ = ['get_color_pallete']", 'def _getvocpallete(num_cls):', 'vocpallete = _getvocpallete(256)'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 39, 57}, 'executed_function_lines': {1, 39, 7}, 'extra_calls': 1, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '_getvocpallete', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/utils/visualize.py', 'lineno': 39, 'args': {'num_cls': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['n = num_cls', 'pallete = [0] * (n * 3)', 'for j in range(0, n):', 'lab = j', 'pallete[j * 3 + 0] = 0', 'pallete[j * 3 + 1] = 0', 'pallete[j * 3 + 2] = 0', 'i = 0', 'while (lab > 0):', 'pallete[j * 3 + 0] |= (((lab >> 0) & 1) << (7 - i))', 'pallete[j * 3 + 1] |= (((lab >> 1) & 1) << (7 - i))', 'pallete[j * 3 + 2] |= (((lab >> 2) & 1) << (7 - i))', 'i = i + 1', 'lab >>= 3', 'return pallete'], 'executed_lines': {40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'list'>", 'shape': (768,)}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 1, 'args': {}, 'lines': ['import os', 'import argparse', 'import torch', 'from torchvision import transforms', 'from models.fast_scnn import get_fast_scnn', 'from PIL import Image', 'from utils.visualize import get_color_pallete', "__all__ = ['get_color_pallete']", 'def _getvocpallete(num_cls):', 'vocpallete = _getvocpallete(256)', 'adepallete = [', 'cityspallete = [', 'parser = argparse.ArgumentParser(', "description='Predict segmentation result from a given image')", "parser.add_argument('--model', type=str, default='fast_scnn',", "help='model name (default: fast_scnn)')", "parser.add_argument('--dataset', type=str, default='citys',", "help='dataset name (default: citys)')", "parser.add_argument('--weights-folder', default='./weights',", "help='Directory for saving checkpoint models')", "parser.add_argument('--input-pic', type=str,", "default='./datasets/citys/leftImg8bit/test/berlin/berlin_000000_000019_leftImg8bit.png',", "help='path to the input picture')", "parser.add_argument('--outdir', default='./test_result', type=str,", "help='path to save the predict result')", "parser.add_argument('--cpu', dest='cpu', action='store_true')", 'parser.set_defaults(cpu=False)', 'args = parser.parse_args()', 'def demo():', "if __name__ == '__main__':", 'demo()'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 30, 39, 54, 55, 57, 59, 79}, 'executed_function_lines': {1, 39, 30, 7}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'demo', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 30, 'args': {}, 'lines': ['device = torch.device("cuda" if torch.cuda.is_available() else "cpu")', 'if not os.path.exists(args.outdir):', 'transform = transforms.Compose([', 'transforms.ToTensor(),', 'transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),', "image = Image.open(args.input_pic).convert('RGB')", 'image = transform(image).unsqueeze(0).to(device)', 'model = get_fast_scnn(args.dataset, pretrained=True, root=args.weights_folder, map_cpu=args.cpu).to(device)'], 'executed_lines': {33, 37, 38, 39, 41, 42, 43, 31}, 'executed_function_lines': {236}, 'extra_calls': 0}

{'function_name': 'get_fast_scnn', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 236, 'args': {'dataset': {'type': "<class 'str'>", 'shape': (5,)}, 'pretrained': {'type': "<class 'bool'>", 'shape': None}, 'root': {'type': "<class 'str'>", 'shape': (9,)}, 'map_cpu': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ["'pascal_voc': 'voc',", "'pascal_aug': 'voc',", "'ade20k': 'ade',", "'coco': 'coco',", "'citys': 'citys',", 'acronyms = {', 'from data_loader import datasets'], 'executed_lines': {237, 238, 239, 240, 241, 242, 244}, 'executed_function_lines': {1}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/data_loader/__init__.py', 'lineno': 1, 'args': {}, 'lines': ['from .cityscapes import CitySegmentation'], 'executed_lines': {1}, 'executed_function_lines': {1}, 'extra_calls': 0}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/data_loader/cityscapes.py', 'lineno': 1, 'args': {}, 'lines': ['"""Cityscapes Dataloader"""', 'import os', 'import random', 'import numpy as np', 'import torch', 'import torch.utils.data as data', 'from PIL import Image, ImageOps, ImageFilter', "__all__ = ['CitySegmentation']", 'class CitySegmentation(data.Dataset):'], 'executed_lines': {1, 2, 3, 4, 5, 6, 8, 10, 13}, 'executed_function_lines': {13}, 'extra_calls': 0}

{'function_name': 'CitySegmentation', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/data_loader/cityscapes.py', 'lineno': 13, 'args': {}, 'lines': ['class CitySegmentation(data.Dataset):', '"""Cityscapes Semantic Segmentation Dataset.', "BASE_DIR = 'cityscapes'", 'NUM_CLASS = 19', "def __init__(self, root='./datasets/citys', split='train', mode=None, transform=None,", 'def _class_to_index(self, mask):', 'def __getitem__(self, index):', 'def _val_sync_transform(self, img, mask):', 'def _sync_transform(self, img, mask):', 'def _img_transform(self, img):', 'def _mask_transform(self, mask):', 'def __len__(self):', '@property', 'def num_class(self):', '@property', 'def pred_offset(self):'], 'executed_lines': {66, 162, 163, 167, 40, 41, 73, 43, 168, 13, 14, 115, 152, 155, 93, 159}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'cell'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/data_loader/cityscapes.py', 'lineno': 1, 'args': {}, 'lines': ['"""Cityscapes Dataloader"""', 'import os', 'import random', 'import numpy as np', 'import torch', 'import torch.utils.data as data', 'from PIL import Image, ImageOps, ImageFilter', "__all__ = ['CitySegmentation']", 'class CitySegmentation(data.Dataset):', "def _get_city_pairs(folder, split='train'):", "if __name__ == '__main__':"], 'executed_lines': {1, 2, 3, 4, 5, 6, 8, 10, 172, 13, 210}, 'executed_function_lines': {13}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/data_loader/__init__.py', 'lineno': 1, 'args': {}, 'lines': ['from .cityscapes import CitySegmentation', "'citys': CitySegmentation,", 'datasets = {', 'def get_segmentation_dataset(name, **kwargs):'], 'executed_lines': {8, 1, 3, 4}, 'executed_function_lines': {1}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'get_fast_scnn', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 236, 'args': {'dataset': {'type': "<class 'str'>", 'shape': (5,)}, 'pretrained': {'type': "<class 'bool'>", 'shape': None}, 'root': {'type': "<class 'str'>", 'shape': (9,)}, 'map_cpu': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ["'pascal_voc': 'voc',", "'pascal_aug': 'voc',", "'ade20k': 'ade',", "'coco': 'coco',", "'citys': 'citys',", 'acronyms = {', 'from data_loader import datasets', 'model = FastSCNN(datasets[dataset].NUM_CLASS, **kwargs)'], 'executed_lines': {237, 238, 239, 240, 241, 242, 244, 245}, 'executed_function_lines': {1, 17}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 17, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'aux': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(FastSCNN, self).__init__()', 'self.aux = aux', 'self.learning_to_downsample = LearningToDownsample(32, 48, 64)'], 'executed_lines': {18, 19, 20}, 'executed_function_lines': {151}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 151, 'args': {'self': {'type': "<class 'models.fast_scnn.LearningToDownsample'>", 'shape': None}, 'dw_channels1': {'type': "<class 'int'>", 'shape': None}, 'dw_channels2': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LearningToDownsample, self).__init__()', 'self.conv = _ConvBNReLU(3, dw_channels1, 3, 2)'], 'executed_lines': {152, 153}, 'executed_function_lines': {52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 52, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'kernel_size': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}, 'padding': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {53, 54, 55, 56, 57}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 151, 'args': {'self': {'type': "<class 'models.fast_scnn.LearningToDownsample'>", 'shape': None}, 'dw_channels1': {'type': "<class 'int'>", 'shape': None}, 'dw_channels2': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LearningToDownsample, self).__init__()', 'self.conv = _ConvBNReLU(3, dw_channels1, 3, 2)', 'self.dsconv1 = _DSConv(dw_channels1, dw_channels2, 2)'], 'executed_lines': {152, 153, 154}, 'executed_function_lines': {67, 52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 67, 'args': {'self': {'type': "<class 'models.fast_scnn._DSConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DSConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, dw_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(dw_channels),', 'nn.ReLU(True),', 'nn.Conv2d(dw_channels, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {68, 69, 70, 71, 72, 73, 74, 75}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 151, 'args': {'self': {'type': "<class 'models.fast_scnn.LearningToDownsample'>", 'shape': None}, 'dw_channels1': {'type': "<class 'int'>", 'shape': None}, 'dw_channels2': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LearningToDownsample, self).__init__()', 'self.conv = _ConvBNReLU(3, dw_channels1, 3, 2)', 'self.dsconv1 = _DSConv(dw_channels1, dw_channels2, 2)', 'self.dsconv2 = _DSConv(dw_channels2, out_channels, 2)', 'super(_DSConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, dw_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(dw_channels),', 'nn.ReLU(True),', 'nn.Conv2d(dw_channels, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {68, 69, 70, 71, 72, 73, 74, 75, 152, 153, 154, 155}, 'executed_function_lines': {67, 52}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 17, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'aux': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(FastSCNN, self).__init__()', 'self.aux = aux', 'self.learning_to_downsample = LearningToDownsample(32, 48, 64)', 'self.global_feature_extractor = GlobalFeatureExtractor(64, [64, 96, 128], 128, 6, [3, 3, 3])'], 'executed_lines': {18, 19, 20, 21}, 'executed_function_lines': {167, 151}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 167, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'block_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'num_blocks': {'type': "<class 'list'>", 'shape': (3,)}}, 'lines': ['super(GlobalFeatureExtractor, self).__init__()', 'self.bottleneck1 = self._make_layer(LinearBottleneck, in_channels, block_channels[0], num_blocks[0], t, 2)'], 'executed_lines': {169, 170}, 'executed_function_lines': {175}, 'extra_calls': 0}

{'function_name': '_make_layer', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 175, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'block': {'type': "<class 'type'>", 'shape': None}, 'inplanes': {'type': "<class 'int'>", 'shape': None}, 'planes': {'type': "<class 'int'>", 'shape': None}, 'blocks': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['layers = []', 'layers.append(block(inplanes, planes, t, stride))'], 'executed_lines': {176, 177}, 'executed_function_lines': {98}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 98, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),'], 'executed_lines': {99, 100, 101, 103}, 'executed_function_lines': {52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 52, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'kernel_size': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}, 'padding': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {53, 54, 55, 56, 57}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 98, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),'], 'executed_lines': {99, 100, 101, 103, 105}, 'executed_function_lines': {83, 52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 83, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {84, 85, 86, 87, 88}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 98, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),', 'nn.Conv2d(in_channels * t, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels)'], 'executed_lines': {99, 100, 101, 103, 105, 107, 108}, 'executed_function_lines': {83, 52}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '_make_layer', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 175, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'block': {'type': "<class 'type'>", 'shape': None}, 'inplanes': {'type': "<class 'int'>", 'shape': None}, 'planes': {'type': "<class 'int'>", 'shape': None}, 'blocks': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),'], 'executed_lines': {99, 100, 101, 103, 176, 177, 178, 179}, 'executed_function_lines': {98, 52}, 'extra_calls': 1}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 52, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'kernel_size': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}, 'padding': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {53, 54, 55, 56, 57}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '_make_layer', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 175, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'block': {'type': "<class 'type'>", 'shape': None}, 'inplanes': {'type': "<class 'int'>", 'shape': None}, 'planes': {'type': "<class 'int'>", 'shape': None}, 'blocks': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),'], 'executed_lines': {99, 100, 101, 103, 105, 176, 177, 178, 179}, 'executed_function_lines': {98, 83, 52}, 'extra_calls': 1}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 83, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {84, 85, 86, 87, 88}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '_make_layer', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 175, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'block': {'type': "<class 'type'>", 'shape': None}, 'inplanes': {'type': "<class 'int'>", 'shape': None}, 'planes': {'type': "<class 'int'>", 'shape': None}, 'blocks': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),', 'nn.Conv2d(in_channels * t, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels)', 'super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'return nn.Sequential(*layers)'], 'executed_lines': {176, 177, 178, 179, 180, 53, 54, 55, 56, 57, 84, 85, 86, 87, 88, 99, 100, 101, 103, 105, 107, 108}, 'executed_function_lines': {98, 83, 52}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.nn.modules.container.Sequential'>", 'shape': (3,)}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 167, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'block_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'num_blocks': {'type': "<class 'list'>", 'shape': (3,)}}, 'lines': ['super(GlobalFeatureExtractor, self).__init__()', 'self.bottleneck1 = self._make_layer(LinearBottleneck, in_channels, block_channels[0], num_blocks[0], t, 2)', 'self.bottleneck2 = self._make_layer(LinearBottleneck, block_channels[0], block_channels[1], num_blocks[1], t, 2)', 'layers = []', 'layers.append(block(inplanes, planes, t, stride))'], 'executed_lines': {169, 170, 171, 176, 177}, 'executed_function_lines': {98, 175}, 'extra_calls': 1}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 98, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),'], 'executed_lines': {99, 100, 101, 103}, 'executed_function_lines': {52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 52, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'kernel_size': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}, 'padding': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {53, 54, 55, 56, 57}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 98, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),'], 'executed_lines': {99, 100, 101, 103, 105}, 'executed_function_lines': {83, 52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 83, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {84, 85, 86, 87, 88}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 98, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),', 'nn.Conv2d(in_channels * t, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels)'], 'executed_lines': {99, 100, 101, 103, 105, 107, 108}, 'executed_function_lines': {83, 52}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 167, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'block_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'num_blocks': {'type': "<class 'list'>", 'shape': (3,)}}, 'lines': ['super(GlobalFeatureExtractor, self).__init__()', 'self.bottleneck1 = self._make_layer(LinearBottleneck, in_channels, block_channels[0], num_blocks[0], t, 2)', 'self.bottleneck2 = self._make_layer(LinearBottleneck, block_channels[0], block_channels[1], num_blocks[1], t, 2)', 'layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),'], 'executed_lines': {99, 100, 101, 103, 169, 170, 171, 176, 177, 178, 179}, 'executed_function_lines': {98, 52, 175}, 'extra_calls': 2}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 52, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'kernel_size': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}, 'padding': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {53, 54, 55, 56, 57}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 167, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'block_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'num_blocks': {'type': "<class 'list'>", 'shape': (3,)}}, 'lines': ['super(GlobalFeatureExtractor, self).__init__()', 'self.bottleneck1 = self._make_layer(LinearBottleneck, in_channels, block_channels[0], num_blocks[0], t, 2)', 'self.bottleneck2 = self._make_layer(LinearBottleneck, block_channels[0], block_channels[1], num_blocks[1], t, 2)', 'layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),'], 'executed_lines': {99, 100, 101, 103, 169, 170, 171, 105, 176, 177, 178, 179}, 'executed_function_lines': {98, 83, 52, 175}, 'extra_calls': 2}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 83, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {84, 85, 86, 87, 88}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 167, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'block_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'num_blocks': {'type': "<class 'list'>", 'shape': (3,)}}, 'lines': ['super(GlobalFeatureExtractor, self).__init__()', 'self.bottleneck1 = self._make_layer(LinearBottleneck, in_channels, block_channels[0], num_blocks[0], t, 2)', 'self.bottleneck2 = self._make_layer(LinearBottleneck, block_channels[0], block_channels[1], num_blocks[1], t, 2)', 'layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),', 'nn.Conv2d(in_channels * t, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels)', 'super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'return nn.Sequential(*layers)', 'self.bottleneck3 = self._make_layer(LinearBottleneck, block_channels[1], block_channels[2], num_blocks[2], t, 1)', 'self.ppm = PyramidPooling(block_channels[2], out_channels)'], 'executed_lines': {169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 53, 54, 55, 56, 57, 84, 85, 86, 87, 88, 99, 100, 101, 103, 105, 107, 108}, 'executed_function_lines': {98, 175, 83, 52, 121}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.nn.modules.container.Sequential'>", 'shape': (3,)}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 121, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(PyramidPooling, self).__init__()', 'inter_channels = int(in_channels / 4)', 'self.conv1 = _ConvBNReLU(in_channels, inter_channels, 1, **kwargs)'], 'executed_lines': {122, 123, 124}, 'executed_function_lines': {52}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 52, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'kernel_size': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}, 'padding': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {53, 54, 55, 56, 57}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 121, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(PyramidPooling, self).__init__()', 'inter_channels = int(in_channels / 4)', 'self.conv1 = _ConvBNReLU(in_channels, inter_channels, 1, **kwargs)', 'self.conv2 = _ConvBNReLU(in_channels, inter_channels, 1, **kwargs)', 'super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'self.conv3 = _ConvBNReLU(in_channels, inter_channels, 1, **kwargs)', 'self.conv4 = _ConvBNReLU(in_channels, inter_channels, 1, **kwargs)', 'self.out = _ConvBNReLU(in_channels * 2, out_channels, 1)'], 'executed_lines': {128, 53, 54, 55, 56, 57, 122, 123, 124, 125, 126, 127}, 'executed_function_lines': {52}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 167, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'in_channels': {'type': "<class 'int'>", 'shape': None}, 'block_channels': {'type': "<class 'list'>", 'shape': (3,)}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 't': {'type': "<class 'int'>", 'shape': None}, 'num_blocks': {'type': "<class 'list'>", 'shape': (3,)}}, 'lines': ['super(GlobalFeatureExtractor, self).__init__()', 'self.bottleneck1 = self._make_layer(LinearBottleneck, in_channels, block_channels[0], num_blocks[0], t, 2)', 'self.bottleneck2 = self._make_layer(LinearBottleneck, block_channels[0], block_channels[1], num_blocks[1], t, 2)', 'layers = []', 'layers.append(block(inplanes, planes, t, stride))', 'for i in range(1, blocks):', 'layers.append(block(planes, planes, t, 1))', 'super(LinearBottleneck, self).__init__()', 'self.use_shortcut = stride == 1 and in_channels == out_channels', 'self.block = nn.Sequential(', '_ConvBNReLU(in_channels, in_channels * t, 1),', '_DWConv(in_channels * t, in_channels * t, stride),', 'nn.Conv2d(in_channels * t, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels)', 'super(_ConvBNReLU, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(in_channels, out_channels, kernel_size, stride, padding, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'return nn.Sequential(*layers)', 'self.bottleneck3 = self._make_layer(LinearBottleneck, block_channels[1], block_channels[2], num_blocks[2], t, 1)', 'self.ppm = PyramidPooling(block_channels[2], out_channels)'], 'executed_lines': {169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 53, 54, 55, 56, 57, 84, 85, 86, 87, 88, 99, 100, 101, 103, 105, 107, 108}, 'executed_function_lines': {98, 175, 83, 52, 121}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 17, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'aux': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(FastSCNN, self).__init__()', 'self.aux = aux', 'self.learning_to_downsample = LearningToDownsample(32, 48, 64)', 'self.global_feature_extractor = GlobalFeatureExtractor(64, [64, 96, 128], 128, 6, [3, 3, 3])', 'self.feature_fusion = FeatureFusionModule(64, 128, 128)'], 'executed_lines': {18, 19, 20, 21, 22}, 'executed_function_lines': {167, 193, 151}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 193, 'args': {'self': {'type': "<class 'models.fast_scnn.FeatureFusionModule'>", 'shape': None}, 'highter_in_channels': {'type': "<class 'int'>", 'shape': None}, 'lower_in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'scale_factor': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(FeatureFusionModule, self).__init__()', 'self.scale_factor = scale_factor', 'self.dwconv = _DWConv(lower_in_channels, out_channels, 1)'], 'executed_lines': {194, 195, 196}, 'executed_function_lines': {83}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 83, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DWConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, out_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {84, 85, 86, 87, 88}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 193, 'args': {'self': {'type': "<class 'models.fast_scnn.FeatureFusionModule'>", 'shape': None}, 'highter_in_channels': {'type': "<class 'int'>", 'shape': None}, 'lower_in_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'scale_factor': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(FeatureFusionModule, self).__init__()', 'self.scale_factor = scale_factor', 'self.dwconv = _DWConv(lower_in_channels, out_channels, 1)', 'self.conv_lower_res = nn.Sequential(', 'nn.Conv2d(out_channels, out_channels, 1),', 'nn.BatchNorm2d(out_channels)', 'self.conv_higher_res = nn.Sequential(', 'nn.Conv2d(highter_in_channels, out_channels, 1),', 'nn.BatchNorm2d(out_channels)', 'self.relu = nn.ReLU(True)'], 'executed_lines': {194, 195, 196, 197, 198, 199, 201, 202, 203, 205}, 'executed_function_lines': {83}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 17, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'aux': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(FastSCNN, self).__init__()', 'self.aux = aux', 'self.learning_to_downsample = LearningToDownsample(32, 48, 64)', 'self.global_feature_extractor = GlobalFeatureExtractor(64, [64, 96, 128], 128, 6, [3, 3, 3])', 'self.feature_fusion = FeatureFusionModule(64, 128, 128)', 'self.classifier = Classifer(128, num_classes)'], 'executed_lines': {18, 19, 20, 21, 22, 23}, 'executed_function_lines': {167, 220, 193, 151}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 220, 'args': {'self': {'type': "<class 'models.fast_scnn.Classifer'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(Classifer, self).__init__()', 'self.dsconv1 = _DSConv(dw_channels, dw_channels, stride)'], 'executed_lines': {221, 222}, 'executed_function_lines': {67}, 'extra_calls': 0}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 67, 'args': {'self': {'type': "<class 'models.fast_scnn._DSConv'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'out_channels': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(_DSConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, dw_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(dw_channels),', 'nn.ReLU(True),', 'nn.Conv2d(dw_channels, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)'], 'executed_lines': {68, 69, 70, 71, 72, 73, 74, 75}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 220, 'args': {'self': {'type': "<class 'models.fast_scnn.Classifer'>", 'shape': None}, 'dw_channels': {'type': "<class 'int'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'stride': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['super(Classifer, self).__init__()', 'self.dsconv1 = _DSConv(dw_channels, dw_channels, stride)', 'self.dsconv2 = _DSConv(dw_channels, dw_channels, stride)', 'super(_DSConv, self).__init__()', 'self.conv = nn.Sequential(', 'nn.Conv2d(dw_channels, dw_channels, 3, stride, 1, groups=dw_channels, bias=False),', 'nn.BatchNorm2d(dw_channels),', 'nn.ReLU(True),', 'nn.Conv2d(dw_channels, out_channels, 1, bias=False),', 'nn.BatchNorm2d(out_channels),', 'nn.ReLU(True)', 'self.conv = nn.Sequential(', 'nn.Dropout(0.1),', 'nn.Conv2d(dw_channels, num_classes, 1)'], 'executed_lines': {224, 225, 226, 68, 69, 70, 71, 72, 73, 74, 75, 221, 222, 223}, 'executed_function_lines': {67}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '__init__', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 17, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'num_classes': {'type': "<class 'int'>", 'shape': None}, 'aux': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ['super(FastSCNN, self).__init__()', 'self.aux = aux', 'self.learning_to_downsample = LearningToDownsample(32, 48, 64)', 'self.global_feature_extractor = GlobalFeatureExtractor(64, [64, 96, 128], 128, 6, [3, 3, 3])', 'self.feature_fusion = FeatureFusionModule(64, 128, 128)', 'self.classifier = Classifer(128, num_classes)', 'if self.aux:'], 'executed_lines': {18, 19, 20, 21, 22, 23, 24}, 'executed_function_lines': {167, 220, 193, 151}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': 'get_fast_scnn', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 236, 'args': {'dataset': {'type': "<class 'str'>", 'shape': (5,)}, 'pretrained': {'type': "<class 'bool'>", 'shape': None}, 'root': {'type': "<class 'str'>", 'shape': (9,)}, 'map_cpu': {'type': "<class 'bool'>", 'shape': None}}, 'lines': ["'pascal_voc': 'voc',", "'pascal_aug': 'voc',", "'ade20k': 'ade',", "'coco': 'coco',", "'citys': 'citys',", 'acronyms = {', 'from data_loader import datasets', 'model = FastSCNN(datasets[dataset].NUM_CLASS, **kwargs)', 'if pretrained:', 'if(map_cpu):', "model.load_state_dict(torch.load(os.path.join(root, 'fast_scnn_%s.pth' % acronyms[dataset])))", 'return model'], 'executed_lines': {237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 250, 251}, 'executed_function_lines': {1, 17}, 'extra_calls': 0, 'return_value': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}}

{'function_name': 'demo', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 30, 'args': {}, 'lines': ['device = torch.device("cuda" if torch.cuda.is_available() else "cpu")', 'if not os.path.exists(args.outdir):', 'transform = transforms.Compose([', 'transforms.ToTensor(),', 'transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),', "image = Image.open(args.input_pic).convert('RGB')", 'image = transform(image).unsqueeze(0).to(device)', 'model = get_fast_scnn(args.dataset, pretrained=True, root=args.weights_folder, map_cpu=args.cpu).to(device)', "print('Finished loading model!')", 'model.eval()', 'with torch.no_grad():', 'outputs = model(image)'], 'executed_lines': {33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 31}, 'executed_function_lines': {33, 236}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 33, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['size = x.size()[2:]', 'higher_res_features = self.learning_to_downsample(x)'], 'executed_lines': {34, 35}, 'executed_function_lines': {157}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 157, 'args': {'self': {'type': "<class 'models.fast_scnn.LearningToDownsample'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['x = self.conv(x)'], 'executed_lines': {158}, 'executed_function_lines': {60}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 60, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {61}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 32, 511, 1023])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 157, 'args': {'self': {'type': "<class 'models.fast_scnn.LearningToDownsample'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['x = self.conv(x)', 'x = self.dsconv1(x)'], 'executed_lines': {158, 159}, 'executed_function_lines': {60, 78}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 78, 'args': {'self': {'type': "<class 'models.fast_scnn._DSConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 32, 511, 1023])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {79}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 48, 256, 512])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 157, 'args': {'self': {'type': "<class 'models.fast_scnn.LearningToDownsample'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['x = self.conv(x)', 'x = self.dsconv1(x)', 'x = self.dsconv2(x)', 'return self.conv(x)', 'return x'], 'executed_lines': {160, 161, 79, 158, 159}, 'executed_function_lines': {60, 78}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 33, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['size = x.size()[2:]', 'higher_res_features = self.learning_to_downsample(x)', 'x = self.global_feature_extractor(higher_res_features)'], 'executed_lines': {34, 35, 36}, 'executed_function_lines': {157, 182}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 182, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['x = self.bottleneck1(x)'], 'executed_lines': {183}, 'executed_function_lines': {111}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 111, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['out = self.block(x)'], 'executed_lines': {112}, 'executed_function_lines': {60}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 60, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {61}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 384, 128, 256])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 111, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['out = self.block(x)'], 'executed_lines': {112}, 'executed_function_lines': {91, 60}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 91, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 384, 128, 256])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {92}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 384, 64, 128])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 111, 'args': {'self': {'type': "<class 'models.fast_scnn.LinearBottleneck'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['out = self.block(x)', 'if self.use_shortcut:', 'return out'], 'executed_lines': {112, 113, 115}, 'executed_function_lines': {91, 60}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 64, 128])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 182, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['x = self.bottleneck1(x)', 'out = self.block(x)'], 'executed_lines': {112, 183}, 'executed_function_lines': {60, 111}, 'extra_calls': 1}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 60, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 64, 128])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {61}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 384, 64, 128])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 182, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['x = self.bottleneck1(x)', 'out = self.block(x)'], 'executed_lines': {112, 183}, 'executed_function_lines': {91, 60, 111}, 'extra_calls': 1}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 91, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 384, 64, 128])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {92}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 384, 64, 128])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 182, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['x = self.bottleneck1(x)', 'out = self.block(x)', 'if self.use_shortcut:', 'out = x + out', 'return out', 'return self.conv(x)', 'x = self.bottleneck2(x)', 'return self.conv(x)', 'x = self.bottleneck3(x)', 'x = self.ppm(x)'], 'executed_lines': {112, 113, 114, 115, 183, 184, 185, 186, 92, 61}, 'executed_function_lines': {137, 91, 60, 111}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 137, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}, 'lines': ['size = x.size()[2:]', 'feat1 = self.upsample(self.conv1(self.pool(x, 1)), size)'], 'executed_lines': {138, 139}, 'executed_function_lines': {130}, 'extra_calls': 0}

{'function_name': 'pool', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 130, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}, 'size': {'type': "<class 'int'>", 'shape': None}}, 'lines': ['avgpool = nn.AdaptiveAvgPool2d(size)', 'return avgpool(x)'], 'executed_lines': {131, 132}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 1, 1])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 137, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}, 'lines': ['size = x.size()[2:]', 'feat1 = self.upsample(self.conv1(self.pool(x, 1)), size)'], 'executed_lines': {138, 139}, 'executed_function_lines': {130, 60}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 60, 'args': {'self': {'type': "<class 'models.fast_scnn._ConvBNReLU'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 1, 1])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {61}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 32, 1, 1])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 137, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}, 'lines': ['size = x.size()[2:]', 'feat1 = self.upsample(self.conv1(self.pool(x, 1)), size)'], 'executed_lines': {138, 139}, 'executed_function_lines': {130, 60, 134}, 'extra_calls': 0}

{'function_name': 'upsample', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 134, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 32, 1, 1])}, 'size': {'type': "<class 'torch.Size'>", 'shape': (2,)}}, 'lines': ["return F.interpolate(x, size, mode='bilinear', align_corners=True)"], 'executed_lines': {135}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 32, 32, 64])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 137, 'args': {'self': {'type': "<class 'models.fast_scnn.PyramidPooling'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}, 'lines': ['size = x.size()[2:]', 'feat1 = self.upsample(self.conv1(self.pool(x, 1)), size)', 'feat2 = self.upsample(self.conv2(self.pool(x, 2)), size)', 'avgpool = nn.AdaptiveAvgPool2d(size)', 'return avgpool(x)', 'return self.conv(x)', "return F.interpolate(x, size, mode='bilinear', align_corners=True)", 'feat3 = self.upsample(self.conv3(self.pool(x, 3)), size)', 'feat4 = self.upsample(self.conv4(self.pool(x, 6)), size)', 'x = torch.cat([x, feat1, feat2, feat3, feat4], dim=1)', 'x = self.out(x)', 'return x'], 'executed_lines': {131, 132, 135, 138, 139, 140, 141, 142, 143, 144, 145, 61}, 'executed_function_lines': {130, 60, 134}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 182, 'args': {'self': {'type': "<class 'models.fast_scnn.GlobalFeatureExtractor'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}}, 'lines': ['x = self.bottleneck1(x)', 'out = self.block(x)', 'if self.use_shortcut:', 'out = x + out', 'return out', 'return self.conv(x)', 'x = self.bottleneck2(x)', 'return self.conv(x)', 'x = self.bottleneck3(x)', 'x = self.ppm(x)', 'return x'], 'executed_lines': {112, 113, 114, 115, 183, 184, 185, 186, 187, 92, 61}, 'executed_function_lines': {137, 91, 60, 111}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 33, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['size = x.size()[2:]', 'higher_res_features = self.learning_to_downsample(x)', 'x = self.global_feature_extractor(higher_res_features)', 'x = self.feature_fusion(higher_res_features, x)'], 'executed_lines': {34, 35, 36, 37}, 'executed_function_lines': {157, 182, 207}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 207, 'args': {'self': {'type': "<class 'models.fast_scnn.FeatureFusionModule'>", 'shape': None}, 'higher_res_feature': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}, 'lower_res_feature': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}, 'lines': ["lower_res_feature = F.interpolate(lower_res_feature, scale_factor=4, mode='bilinear', align_corners=True)", 'lower_res_feature = self.dwconv(lower_res_feature)'], 'executed_lines': {208, 209}, 'executed_function_lines': {91}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 91, 'args': {'self': {'type': "<class 'models.fast_scnn._DWConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {92}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 207, 'args': {'self': {'type': "<class 'models.fast_scnn.FeatureFusionModule'>", 'shape': None}, 'higher_res_feature': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 64, 128, 256])}, 'lower_res_feature': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 32, 64])}}, 'lines': ["lower_res_feature = F.interpolate(lower_res_feature, scale_factor=4, mode='bilinear', align_corners=True)", 'lower_res_feature = self.dwconv(lower_res_feature)', 'lower_res_feature = self.conv_lower_res(lower_res_feature)', 'higher_res_feature = self.conv_higher_res(higher_res_feature)', 'out = higher_res_feature + lower_res_feature', 'return self.relu(out)'], 'executed_lines': {208, 209, 210, 212, 213, 214}, 'executed_function_lines': {91}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 33, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['size = x.size()[2:]', 'higher_res_features = self.learning_to_downsample(x)', 'x = self.global_feature_extractor(higher_res_features)', 'x = self.feature_fusion(higher_res_features, x)', 'x = self.classifier(x)'], 'executed_lines': {34, 35, 36, 37, 38}, 'executed_function_lines': {229, 157, 182, 207}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 229, 'args': {'self': {'type': "<class 'models.fast_scnn.Classifer'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}, 'lines': ['x = self.dsconv1(x)'], 'executed_lines': {230}, 'executed_function_lines': {78}, 'extra_calls': 0}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 78, 'args': {'self': {'type': "<class 'models.fast_scnn._DSConv'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}, 'lines': ['return self.conv(x)'], 'executed_lines': {79}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 229, 'args': {'self': {'type': "<class 'models.fast_scnn.Classifer'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 128, 128, 256])}}, 'lines': ['x = self.dsconv1(x)', 'x = self.dsconv2(x)', 'return self.conv(x)', 'x = self.conv(x)', 'return x'], 'executed_lines': {230, 231, 232, 233, 79}, 'executed_function_lines': {78}, 'extra_calls': 0, 'return_value': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 19, 128, 256])}}

{'function_name': 'forward', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/models/fast_scnn.py', 'lineno': 33, 'args': {'self': {'type': "<class 'models.fast_scnn.FastSCNN'>", 'shape': None}, 'x': {'type': "<class 'torch.Tensor'>", 'shape': torch.Size([1, 3, 1024, 2048])}}, 'lines': ['size = x.size()[2:]', 'higher_res_features = self.learning_to_downsample(x)', 'x = self.global_feature_extractor(higher_res_features)', 'x = self.feature_fusion(higher_res_features, x)', 'x = self.classifier(x)', 'outputs = []', "x = F.interpolate(x, size, mode='bilinear', align_corners=True)", 'outputs.append(x)', 'if self.aux:', 'return tuple(outputs)'], 'executed_lines': {34, 35, 36, 37, 38, 39, 40, 41, 42, 46}, 'executed_function_lines': {229, 157, 182, 207}, 'extra_calls': 0, 'return_value': {'type': "<class 'tuple'>", 'shape': (1,)}}

{'function_name': 'demo', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 30, 'args': {}, 'lines': ['device = torch.device("cuda" if torch.cuda.is_available() else "cpu")', 'if not os.path.exists(args.outdir):', 'transform = transforms.Compose([', 'transforms.ToTensor(),', 'transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),', "image = Image.open(args.input_pic).convert('RGB')", 'image = transform(image).unsqueeze(0).to(device)', 'model = get_fast_scnn(args.dataset, pretrained=True, root=args.weights_folder, map_cpu=args.cpu).to(device)', "print('Finished loading model!')", 'model.eval()', 'with torch.no_grad():', 'outputs = model(image)', 'pred = torch.argmax(outputs[0], 1).squeeze(0).cpu().data.numpy()', 'mask = get_color_pallete(pred, args.dataset)'], 'executed_lines': {33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 31}, 'executed_function_lines': {33, 236, 7}, 'extra_calls': 0}

{'function_name': 'get_color_pallete', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/utils/visualize.py', 'lineno': 7, 'args': {'npimg': {'type': "<class 'numpy.ndarray'>", 'shape': (1024, 2048)}, 'dataset': {'type': "<class 'str'>", 'shape': (5,)}}, 'lines': ["if dataset in ('pascal_voc', 'pascal_aug'):", "if dataset == 'ade20k':", "elif dataset == 'citys':", "out_img = Image.fromarray(npimg.astype('uint8'))", 'out_img.putpalette(cityspallete)', 'return out_img'], 'executed_lines': {32, 33, 22, 25, 30, 31}, 'executed_function_lines': set(), 'extra_calls': 0, 'return_value': {'type': "<class 'PIL.Image.Image'>", 'shape': (2048, 1024)}}

{'function_name': 'demo', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 30, 'args': {}, 'lines': ['device = torch.device("cuda" if torch.cuda.is_available() else "cpu")', 'if not os.path.exists(args.outdir):', 'transform = transforms.Compose([', 'transforms.ToTensor(),', 'transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),', "image = Image.open(args.input_pic).convert('RGB')", 'image = transform(image).unsqueeze(0).to(device)', 'model = get_fast_scnn(args.dataset, pretrained=True, root=args.weights_folder, map_cpu=args.cpu).to(device)', "print('Finished loading model!')", 'model.eval()', 'with torch.no_grad():', 'outputs = model(image)', 'pred = torch.argmax(outputs[0], 1).squeeze(0).cpu().data.numpy()', 'mask = get_color_pallete(pred, args.dataset)', "outname = os.path.splitext(os.path.split(args.input_pic)[-1])[0] + '.png'", 'mask.save(os.path.join(args.outdir, outname))'], 'executed_lines': {33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 31}, 'executed_function_lines': {33, 236, 7}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

{'function_name': '<module>', 'filename': '/media/sarthak/storage/Pipeline_Generator/Fast-SCNN-pytorch/demo.py', 'lineno': 1, 'args': {}, 'lines': ['import os', 'import argparse', 'import torch', 'from torchvision import transforms', 'from models.fast_scnn import get_fast_scnn', 'from PIL import Image', 'from utils.visualize import get_color_pallete', "__all__ = ['get_color_pallete']", 'def _getvocpallete(num_cls):', 'vocpallete = _getvocpallete(256)', 'adepallete = [', 'cityspallete = [', 'parser = argparse.ArgumentParser(', "description='Predict segmentation result from a given image')", "parser.add_argument('--model', type=str, default='fast_scnn',", "help='model name (default: fast_scnn)')", "parser.add_argument('--dataset', type=str, default='citys',", "help='dataset name (default: citys)')", "parser.add_argument('--weights-folder', default='./weights',", "help='Directory for saving checkpoint models')", "parser.add_argument('--input-pic', type=str,", "default='./datasets/citys/leftImg8bit/test/berlin/berlin_000000_000019_leftImg8bit.png',", "help='path to the input picture')", "parser.add_argument('--outdir', default='./test_result', type=str,", "help='path to save the predict result')", "parser.add_argument('--cpu', dest='cpu', action='store_true')", 'parser.set_defaults(cpu=False)', 'args = parser.parse_args()', 'def demo():', "if __name__ == '__main__':", 'demo()'], 'executed_lines': {1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 30, 39, 54, 55, 57, 59, 79}, 'executed_function_lines': {1, 39, 30, 7}, 'extra_calls': 0, 'return_value': {'type': "<class 'NoneType'>", 'shape': None}}

